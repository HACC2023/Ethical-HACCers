"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assignable_1 = __importDefault(require("../../utils/assignable"));
const generate_id_1 = __importDefault(require("./generate-id"));
class DriverStatus extends assignable_1.default {
    constructor(obj) {
        super(obj);
        this.id = (0, generate_id_1.default)();
        this.isCommandResult = false;
        this.executionError = null;
        this.pageError = null;
        this.resent = false;
        this.result = null;
        this.consoleMessages = null;
        this.isPendingWindowSwitching = false;
        this.isObservingFileDownloadingInNewWindow = false;
        this.isFirstRequestAfterWindowSwitching = false;
        this.warnings = null;
        this._assignFrom(obj, true);
    }
    getAssignableProperties() {
        return [
            { name: 'isCommandResult' },
            { name: 'executionError' },
            { name: 'pageError' },
            { name: 'result' },
            { name: 'consoleMessages' },
            { name: 'isPendingWindowSwitching' },
            { name: 'isObservingFileDownloadingInNewWindow' },
            { name: 'isFirstRequestAfterWindowSwitching' },
            { name: 'warnings' },
        ];
    }
}
exports.default = DriverStatus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudC9kcml2ZXIvc3RhdHVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBQWdEO0FBQ2hELGdFQUF1QztBQUd2QyxNQUFxQixZQUFhLFNBQVEsb0JBQVU7SUFDaEQsWUFBYSxHQUFHO1FBQ1osS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLEVBQUUsR0FBc0MsSUFBQSxxQkFBVSxHQUFFLENBQUM7UUFDMUQsSUFBSSxDQUFDLGVBQWUsR0FBeUIsS0FBSyxDQUFDO1FBQ25ELElBQUksQ0FBQyxjQUFjLEdBQTBCLElBQUksQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUErQixJQUFJLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBa0MsS0FBSyxDQUFDO1FBQ25ELElBQUksQ0FBQyxNQUFNLEdBQWtDLElBQUksQ0FBQztRQUNsRCxJQUFJLENBQUMsZUFBZSxHQUF5QixJQUFJLENBQUM7UUFDbEQsSUFBSSxDQUFDLHdCQUF3QixHQUFnQixLQUFLLENBQUM7UUFDbkQsSUFBSSxDQUFDLHFDQUFxQyxHQUFHLEtBQUssQ0FBQztRQUNuRCxJQUFJLENBQUMsa0NBQWtDLEdBQU0sS0FBSyxDQUFDO1FBQ25ELElBQUksQ0FBQyxRQUFRLEdBQWdDLElBQUksQ0FBQztRQUVsRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsdUJBQXVCO1FBQ25CLE9BQU87WUFDSCxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUMzQixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUMxQixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDckIsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ2xCLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFO1lBQzNCLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFO1lBQ3BDLEVBQUUsSUFBSSxFQUFFLHVDQUF1QyxFQUFFO1lBQ2pELEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFO1lBQzlDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtTQUN2QixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBaENELCtCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc3NpZ25hYmxlIGZyb20gJy4uLy4uL3V0aWxzL2Fzc2lnbmFibGUnO1xuaW1wb3J0IGdlbmVyYXRlSWQgZnJvbSAnLi9nZW5lcmF0ZS1pZCc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJpdmVyU3RhdHVzIGV4dGVuZHMgQXNzaWduYWJsZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaikge1xuICAgICAgICBzdXBlcihvYmopO1xuXG4gICAgICAgIHRoaXMuaWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IGdlbmVyYXRlSWQoKTtcbiAgICAgICAgdGhpcy5pc0NvbW1hbmRSZXN1bHQgICAgICAgICAgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXhlY3V0aW9uRXJyb3IgICAgICAgICAgICAgICAgICAgICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMucGFnZUVycm9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMucmVzZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc3VsdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbnNvbGVNZXNzYWdlcyAgICAgICAgICAgICAgICAgICAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLmlzUGVuZGluZ1dpbmRvd1N3aXRjaGluZyAgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc09ic2VydmluZ0ZpbGVEb3dubG9hZGluZ0luTmV3V2luZG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNGaXJzdFJlcXVlc3RBZnRlcldpbmRvd1N3aXRjaGluZyAgICA9IGZhbHNlO1xuICAgICAgICB0aGlzLndhcm5pbmdzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2Fzc2lnbkZyb20ob2JqLCB0cnVlKTtcbiAgICB9XG5cbiAgICBnZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdpc0NvbW1hbmRSZXN1bHQnIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleGVjdXRpb25FcnJvcicgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3BhZ2VFcnJvcicgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3Jlc3VsdCcgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2NvbnNvbGVNZXNzYWdlcycgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2lzUGVuZGluZ1dpbmRvd1N3aXRjaGluZycgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2lzT2JzZXJ2aW5nRmlsZURvd25sb2FkaW5nSW5OZXdXaW5kb3cnIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdpc0ZpcnN0UmVxdWVzdEFmdGVyV2luZG93U3dpdGNoaW5nJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnd2FybmluZ3MnIH0sXG4gICAgICAgIF07XG4gICAgfVxufVxuIl19