"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextFocusableElement = exports.focusNextElement = exports.getDeepActiveElement = exports.getChar = exports.getActualKeysAndEventKeyProperties = exports.changeLetterCase = void 0;
const hammerhead_1 = __importDefault(require("../../deps/hammerhead"));
const testcafe_core_1 = require("../../deps/testcafe-core");
const is_letter_1 = __importDefault(require("../../utils/is-letter"));
const nativeMethods = hammerhead_1.default.nativeMethods;
const browserUtils = hammerhead_1.default.utils.browser;
const focusBlurSandbox = hammerhead_1.default.eventSandbox.focusBlur;
const Promise = hammerhead_1.default.Promise;
const { isRadioButtonElement, getActiveElement, getTabIndexAttributeIntValue } = testcafe_core_1.domUtils;
function changeLetterCase(letter) {
    const isLowCase = letter === letter.toLowerCase();
    return isLowCase ? letter.toUpperCase() : letter.toLowerCase();
}
exports.changeLetterCase = changeLetterCase;
function getActualKeysAndEventKeyProperties(keyArray) {
    const eventKeyProperties = keyArray.slice();
    //NOTE: check 'shift' modifier in keys
    for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];
        if (key.toLowerCase() === 'shift') {
            const nextKey = keyArray[i + 1];
            if (!nextKey)
                continue;
            if (testcafe_core_1.KEY_MAPS.shiftMap[nextKey])
                keyArray[i + 1] = testcafe_core_1.KEY_MAPS.shiftMap[nextKey];
            else if (testcafe_core_1.KEY_MAPS.reversedShiftMap[nextKey])
                eventKeyProperties[i + 1] = testcafe_core_1.KEY_MAPS.reversedShiftMap[nextKey];
        }
        if (testcafe_core_1.KEY_MAPS.shiftMap[key] && (!keyArray[i - 1] || keyArray[i - 1].toLowerCase() !== 'shift')) {
            keyArray[i] = testcafe_core_1.KEY_MAPS.shiftMap[key];
            keyArray.splice(i, 0, 'shift');
            eventKeyProperties.splice(i, 0, 'shift');
            i++;
        }
    }
    return { actualKeys: keyArray, eventKeyProperties };
}
exports.getActualKeysAndEventKeyProperties = getActualKeysAndEventKeyProperties;
function getChar(key, shiftModified) {
    if (key === 'space')
        return ' ';
    if (shiftModified) {
        if ((0, is_letter_1.default)(key))
            return changeLetterCase(key);
        if (testcafe_core_1.KEY_MAPS.reversedShiftMap[key])
            return testcafe_core_1.KEY_MAPS.reversedShiftMap[key];
    }
    return key;
}
exports.getChar = getChar;
function getDeepActiveElement(currentDocument) {
    const doc = currentDocument || document;
    const activeElement = getActiveElement(doc);
    let activeElementInIframe = null;
    if (activeElement && testcafe_core_1.domUtils.isIframeElement(activeElement) &&
        nativeMethods.contentDocumentGetter.call(activeElement)) {
        try {
            activeElementInIframe = getDeepActiveElement(nativeMethods.contentDocumentGetter.call(activeElement));
        }
        catch (e) { // eslint-disable-line no-empty
        }
    }
    return activeElementInIframe || activeElement;
}
exports.getDeepActiveElement = getDeepActiveElement;
function focusNextElement(element, reverse, skipRadioGroups) {
    return new Promise(resolve => {
        const nextElement = getNextFocusableElement(element, reverse, skipRadioGroups);
        if (nextElement)
            focusBlurSandbox.focus(nextElement, () => resolve(nextElement));
        else
            resolve();
    });
}
exports.focusNextElement = focusNextElement;
function getFocusableElementsFilter(sourceElement, skipRadioGroups) {
    let filter = null;
    if (skipRadioGroups) {
        // NOTE: in all browsers except Mozilla and Opera focus sets on one radio set from group only.
        // in Mozilla and Opera focus sets on any radio set.
        if (sourceElement.name !== '' && !browserUtils.isFirefox)
            filter = item => !item.name || item === sourceElement || item.name !== sourceElement.name;
    }
    // NOTE arrow navigations works with radio buttons in all browsers only between radio buttons with same names
    // Navigation between radio buttons without name just moves focus between radio buttons in Chrome
    // In other browsers navigation between radio buttons without name does not work
    else if (sourceElement.name !== '')
        filter = item => isRadioButtonElement(item) && item.name === sourceElement.name;
    else if (browserUtils.isChrome)
        filter = item => isRadioButtonElement(item) && !item.name;
    return filter;
}
function filterFocusableElements(elements, sourceElement, skipRadioGroups) {
    if (!isRadioButtonElement(sourceElement))
        return elements;
    if (!skipRadioGroups && !sourceElement.name && !browserUtils.isChrome)
        return [sourceElement];
    const filterFn = getFocusableElementsFilter(sourceElement, skipRadioGroups);
    if (filterFn)
        elements = testcafe_core_1.arrayUtils.filter(elements, filterFn);
    return elements;
}
function correctFocusableElement(elements, element, skipRadioGroups) {
    const isNotCheckedRadioButtonElement = isRadioButtonElement(element) && element.name && !element.checked;
    let checkedRadioButtonElementWithSameName = null;
    if (skipRadioGroups && isNotCheckedRadioButtonElement) {
        checkedRadioButtonElementWithSameName = testcafe_core_1.arrayUtils.find(elements, el => {
            return isRadioButtonElement(el) && el.name === element.name && el.checked;
        });
    }
    return checkedRadioButtonElementWithSameName || element;
}
function activeElementHasNegativeTabIndex(doc) {
    const activeElement = nativeMethods.documentActiveElementGetter.call(doc);
    const activeElementTabIndex = activeElement && getTabIndexAttributeIntValue(activeElement);
    return activeElement && activeElementTabIndex < 0;
}
function getNextFocusableElement(element, reverse, skipRadioGroups) {
    const offset = reverse ? -1 : 1;
    const doc = testcafe_core_1.domUtils.getTopSameDomainWindow(window).document;
    const sort = !activeElementHasNegativeTabIndex(doc);
    let allFocusable = testcafe_core_1.domUtils.getFocusableElements(doc, sort);
    allFocusable = filterFocusableElements(allFocusable, element, skipRadioGroups);
    const isRadioInput = isRadioButtonElement(element);
    const currentIndex = testcafe_core_1.arrayUtils.indexOf(allFocusable, element);
    const isLastElementFocused = reverse ? currentIndex === 0 : currentIndex === allFocusable.length - 1;
    if (isLastElementFocused) {
        if (!reverse && element.tabIndex < 0)
            return testcafe_core_1.arrayUtils.find(allFocusable, el => el.tabIndex === 0);
        return skipRadioGroups || !isRadioInput ? document.body : allFocusable[allFocusable.length - 1 - currentIndex];
    }
    if (reverse && currentIndex === -1)
        return allFocusable[allFocusable.length - 1];
    return correctFocusableElement(allFocusable, allFocusable[currentIndex + offset], skipRadioGroups);
}
exports.getNextFocusableElement = getNextFocusableElement;
//# sourceMappingURL=data:application/json;base64,