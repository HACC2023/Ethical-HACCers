"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFixedElement = exports.hasDimensions = exports.isNotVisibleNode = exports.isNotDisplayedNode = exports.isHiddenNode = exports.getWindowDimensions = exports.getViewportDimensions = exports.set = exports.getElementPaddingFloat = exports.getBordersWidthFloat = exports.get = exports.setScrollTop = exports.setScrollLeft = exports.getScrollTop = exports.getScrollLeft = exports.getInnerHeight = exports.getInnerWidth = exports.getHeight = exports.getWidth = exports.isSelectVisibleChild = exports.isElementVisible = exports.getSelectElementSize = exports.getOptionHeight = exports.getElementScroll = exports.getElementPadding = exports.getElementMargin = exports.getComputedStyle = exports.getBordersWidth = void 0;
const hammerhead_1 = __importDefault(require("../deps/hammerhead"));
const boundary_values_1 = __importDefault(require("./values/boundary-values"));
const domUtils = __importStar(require("./dom"));
const styleUtils = hammerhead_1.default.utils.style;
exports.getBordersWidth = hammerhead_1.default.utils.style.getBordersWidth;
exports.getComputedStyle = hammerhead_1.default.utils.style.getComputedStyle;
exports.getElementMargin = hammerhead_1.default.utils.style.getElementMargin;
exports.getElementPadding = hammerhead_1.default.utils.style.getElementPadding;
exports.getElementScroll = hammerhead_1.default.utils.style.getElementScroll;
exports.getOptionHeight = hammerhead_1.default.utils.style.getOptionHeight;
exports.getSelectElementSize = hammerhead_1.default.utils.style.getSelectElementSize;
exports.isElementVisible = hammerhead_1.default.utils.style.isElementVisible;
exports.isSelectVisibleChild = hammerhead_1.default.utils.style.isVisibleChild;
exports.getWidth = hammerhead_1.default.utils.style.getWidth;
exports.getHeight = hammerhead_1.default.utils.style.getHeight;
exports.getInnerWidth = hammerhead_1.default.utils.style.getInnerWidth;
exports.getInnerHeight = hammerhead_1.default.utils.style.getInnerHeight;
exports.getScrollLeft = hammerhead_1.default.utils.style.getScrollLeft;
exports.getScrollTop = hammerhead_1.default.utils.style.getScrollTop;
exports.setScrollLeft = hammerhead_1.default.utils.style.setScrollLeft;
exports.setScrollTop = hammerhead_1.default.utils.style.setScrollTop;
exports.get = hammerhead_1.default.utils.style.get;
exports.getBordersWidthFloat = hammerhead_1.default.utils.style.getBordersWidthFloat;
exports.getElementPaddingFloat = hammerhead_1.default.utils.style.getElementPaddingFloat;
function set(el, style, value) {
    if (typeof style === 'string')
        styleUtils.set(el, style, value);
    for (const property in style) {
        if (style.hasOwnProperty(property))
            styleUtils.set(el, property, style[property]);
    }
}
exports.set = set;
function getViewportDimension(windowDimension, documentDimension, bodyDimension) {
    if (documentDimension > windowDimension)
        return bodyDimension;
    if (bodyDimension > windowDimension)
        return documentDimension;
    return Math.max(bodyDimension, documentDimension);
}
function getViewportDimensions() {
    return {
        width: getViewportDimension(window.innerWidth, document.documentElement.clientWidth, document.body.clientWidth),
        height: getViewportDimension(window.innerHeight, document.documentElement.clientHeight, document.body.clientHeight),
    };
}
exports.getViewportDimensions = getViewportDimensions;
function getWindowDimensions(window) {
    return new boundary_values_1.default(0, (0, exports.getWidth)(window), (0, exports.getHeight)(window), 0);
}
exports.getWindowDimensions = getWindowDimensions;
function isHiddenNode(node) {
    return !!domUtils.findParent(node, true, ancestor => domUtils.isElementNode(ancestor) && styleUtils.get(ancestor, 'visibility') === 'hidden');
}
exports.isHiddenNode = isHiddenNode;
function isNotDisplayedNode(node) {
    return !!domUtils.findParent(node, true, ancestor => domUtils.isElementNode(ancestor) && styleUtils.get(ancestor, 'display') === 'none');
}
exports.isNotDisplayedNode = isNotDisplayedNode;
function isNotVisibleNode(node) {
    return !domUtils.isRenderedNode(node) || isNotDisplayedNode(node) || isHiddenNode(node);
}
exports.isNotVisibleNode = isNotVisibleNode;
function hasDimensions(el) {
    //NOTE: it's like jquery ':visible' selector (http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/)
    return el && !(el.offsetHeight <= 0 && el.offsetWidth <= 0);
}
exports.hasDimensions = hasDimensions;
function isFixedElement(node) {
    return domUtils.isElementNode(node) && styleUtils.get(node, 'position') === 'fixed';
}
exports.isFixedElement = isFixedElement;
//# sourceMappingURL=data:application/json;base64,