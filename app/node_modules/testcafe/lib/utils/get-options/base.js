"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_to_best_fit_type_1 = __importDefault(require("../convert-to-best-fit-type"));
const DEFAULT_OPTIONS_SEPARATOR = ',';
const DEFAULT_KEY_VALUE_SEPARATOR = '=';
function convertOptionValueType(value) {
    // NOTE: threat a key without a separator and a value as a boolean flag
    if (value === void 0)
        return true;
    return (0, convert_to_best_fit_type_1.default)(value);
}
function parseOptionsString(optionsStr, optionsSeparator, keyValueSeparator) {
    return optionsStr
        .split(optionsSeparator)
        .map(keyValueString => keyValueString.split(keyValueSeparator))
        .map(([key, ...value]) => [key, value.length > 1 ? value.join(keyValueSeparator) : value[0]]);
}
async function default_1(sourceOptions = '', optionsConfig = {}) {
    const { optionsSeparator = DEFAULT_OPTIONS_SEPARATOR, keyValueSeparator = DEFAULT_KEY_VALUE_SEPARATOR, skipOptionValueTypeConversion = false, onOptionParsed = void 0, } = optionsConfig;
    const optionsList = typeof sourceOptions === 'string' ?
        parseOptionsString(sourceOptions, optionsSeparator, keyValueSeparator) :
        Object.entries(sourceOptions);
    const resultOptions = Object.create(null);
    await Promise.all(optionsList.map(async ([key, value]) => {
        if (!skipOptionValueTypeConversion)
            value = convertOptionValueType(value);
        if (onOptionParsed)
            value = await onOptionParsed(key, value);
        resultOptions[key] = value;
    }));
    return resultOptions;
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9nZXQtb3B0aW9ucy9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkZBQStEO0FBRy9ELE1BQU0seUJBQXlCLEdBQUssR0FBRyxDQUFDO0FBQ3hDLE1BQU0sMkJBQTJCLEdBQUcsR0FBRyxDQUFDO0FBSXhDLFNBQVMsc0JBQXNCLENBQUUsS0FBVTtJQUN2Qyx1RUFBdUU7SUFDdkUsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0lBRWhCLE9BQU8sSUFBQSxrQ0FBb0IsRUFBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBRSxVQUFrQixFQUFFLGdCQUF3QixFQUFFLGlCQUF5QjtJQUNoRyxPQUFPLFVBQVU7U0FDWixLQUFLLENBQUMsZ0JBQWdCLENBQUM7U0FDdkIsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzlELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVjLEtBQUssb0JBQVcsZ0JBQWdFLEVBQUUsRUFBRSxnQkFBd0MsRUFBRTtJQUN6SSxNQUFNLEVBQ0YsZ0JBQWdCLEdBQUcseUJBQXlCLEVBQzVDLGlCQUFpQixHQUFHLDJCQUEyQixFQUMvQyw2QkFBNkIsR0FBRyxLQUFLLEVBQ3JDLGNBQWMsR0FBRyxLQUFLLENBQUMsR0FDMUIsR0FBRyxhQUFhLENBQUM7SUFFbEIsTUFBTSxXQUFXLEdBQUcsT0FBTyxhQUFhLEtBQUssUUFBUSxDQUFDLENBQUM7UUFDbkQsa0JBQWtCLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWxDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDckQsSUFBSSxDQUFDLDZCQUE2QjtZQUM5QixLQUFLLEdBQUcsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUMsSUFBSSxjQUFjO1lBQ2QsS0FBSyxHQUFHLE1BQU0sY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU3QyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFSixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBekJELDRCQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb252ZXJ0VG9CZXN0Rml0VHlwZSBmcm9tICcuLi9jb252ZXJ0LXRvLWJlc3QtZml0LXR5cGUnO1xuaW1wb3J0IHsgRGljdGlvbmFyeSwgR2V0T3B0aW9uQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uLy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OU19TRVBBUkFUT1IgICA9ICcsJztcbmNvbnN0IERFRkFVTFRfS0VZX1ZBTFVFX1NFUEFSQVRPUiA9ICc9JztcblxudHlwZSBPcHRpb25LZXlWYWx1ZSA9IFtzdHJpbmcsIHN0cmluZ107XG5cbmZ1bmN0aW9uIGNvbnZlcnRPcHRpb25WYWx1ZVR5cGUgKHZhbHVlOiBhbnkpOiBhbnkge1xuICAgIC8vIE5PVEU6IHRocmVhdCBhIGtleSB3aXRob3V0IGEgc2VwYXJhdG9yIGFuZCBhIHZhbHVlIGFzIGEgYm9vbGVhbiBmbGFnXG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGNvbnZlcnRUb0Jlc3RGaXRUeXBlKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VPcHRpb25zU3RyaW5nIChvcHRpb25zU3RyOiBzdHJpbmcsIG9wdGlvbnNTZXBhcmF0b3I6IHN0cmluZywga2V5VmFsdWVTZXBhcmF0b3I6IHN0cmluZyk6IE9wdGlvbktleVZhbHVlW10ge1xuICAgIHJldHVybiBvcHRpb25zU3RyXG4gICAgICAgIC5zcGxpdChvcHRpb25zU2VwYXJhdG9yKVxuICAgICAgICAubWFwKGtleVZhbHVlU3RyaW5nID0+IGtleVZhbHVlU3RyaW5nLnNwbGl0KGtleVZhbHVlU2VwYXJhdG9yKSlcbiAgICAgICAgLm1hcCgoW2tleSwgLi4udmFsdWVdKSA9PiBba2V5LCB2YWx1ZS5sZW5ndGggPiAxID8gdmFsdWUuam9pbihrZXlWYWx1ZVNlcGFyYXRvcikgOiB2YWx1ZVswXV0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoc291cmNlT3B0aW9uczogc3RyaW5nIHwgRGljdGlvbmFyeTxzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPiA9ICcnLCBvcHRpb25zQ29uZmlnOiBHZXRPcHRpb25Db25maWd1cmF0aW9uID0ge30pOiBQcm9taXNlPERpY3Rpb25hcnk8YW55Pj4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgb3B0aW9uc1NlcGFyYXRvciA9IERFRkFVTFRfT1BUSU9OU19TRVBBUkFUT1IsXG4gICAgICAgIGtleVZhbHVlU2VwYXJhdG9yID0gREVGQVVMVF9LRVlfVkFMVUVfU0VQQVJBVE9SLFxuICAgICAgICBza2lwT3B0aW9uVmFsdWVUeXBlQ29udmVyc2lvbiA9IGZhbHNlLFxuICAgICAgICBvbk9wdGlvblBhcnNlZCA9IHZvaWQgMCxcbiAgICB9ID0gb3B0aW9uc0NvbmZpZztcblxuICAgIGNvbnN0IG9wdGlvbnNMaXN0ID0gdHlwZW9mIHNvdXJjZU9wdGlvbnMgPT09ICdzdHJpbmcnID9cbiAgICAgICAgcGFyc2VPcHRpb25zU3RyaW5nKHNvdXJjZU9wdGlvbnMsIG9wdGlvbnNTZXBhcmF0b3IsIGtleVZhbHVlU2VwYXJhdG9yKSA6XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHNvdXJjZU9wdGlvbnMpO1xuXG4gICAgY29uc3QgcmVzdWx0T3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChvcHRpb25zTGlzdC5tYXAoYXN5bmMgKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAoIXNraXBPcHRpb25WYWx1ZVR5cGVDb252ZXJzaW9uKVxuICAgICAgICAgICAgdmFsdWUgPSBjb252ZXJ0T3B0aW9uVmFsdWVUeXBlKHZhbHVlKTtcblxuICAgICAgICBpZiAob25PcHRpb25QYXJzZWQpXG4gICAgICAgICAgICB2YWx1ZSA9IGF3YWl0IG9uT3B0aW9uUGFyc2VkKGtleSwgdmFsdWUpO1xuXG4gICAgICAgIHJlc3VsdE9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgIH0pKTtcblxuICAgIHJldHVybiByZXN1bHRPcHRpb25zO1xufVxuXG4iXX0=