"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const async_exit_hook_1 = __importDefault(require("async-exit-hook"));
const tmp_1 = __importDefault(require("tmp"));
const make_dir_1 = __importDefault(require("make-dir"));
const lockfile_1 = __importDefault(require("./lockfile"));
const cleanup_process_1 = __importDefault(require("./cleanup-process"));
const promisified_functions_1 = require("../../utils/promisified-functions");
// NOTE: mutable for testing purposes
const TESTCAFE_TMP_DIRS_ROOT = path_1.default.join(os_1.default.tmpdir(), 'testcafe');
const DEFAULT_NAME_PREFIX = 'tmp';
const USED_TEMP_DIRS = {};
const DEBUG_LOGGER = (0, debug_1.default)('testcafe:utils:temp-directory');
class TempDirectory {
    constructor(namePrefix) {
        this.namePrefix = namePrefix || DEFAULT_NAME_PREFIX;
        this.path = '';
        this.lockFile = null;
    }
    async _getTmpDirsList() {
        const tmpDirNames = await (0, promisified_functions_1.readDir)(TempDirectory.TEMP_DIRECTORIES_ROOT);
        return tmpDirNames
            .filter(tmpDir => !USED_TEMP_DIRS[tmpDir])
            .filter(tmpDir => path_1.default.basename(tmpDir).startsWith(this.namePrefix));
    }
    async _findFreeTmpDir(tmpDirNames) {
        for (const tmpDirName of tmpDirNames) {
            const tmpDirPath = path_1.default.join(TempDirectory.TEMP_DIRECTORIES_ROOT, tmpDirName);
            const lockFile = new lockfile_1.default(tmpDirPath);
            if (lockFile.init()) {
                this.path = tmpDirPath;
                this.lockFile = lockFile;
                return true;
            }
        }
        return false;
    }
    async _createNewTmpDir() {
        this.path = tmp_1.default.tmpNameSync({ dir: TempDirectory.TEMP_DIRECTORIES_ROOT, prefix: this.namePrefix + '-' });
        await (0, make_dir_1.default)(this.path);
        this.lockFile = new lockfile_1.default(this.path);
        this.lockFile.init();
    }
    _disposeSync() {
        if (!USED_TEMP_DIRS[this.path])
            return;
        this.lockFile.dispose();
        delete USED_TEMP_DIRS[this.path];
    }
    static async createDirectory(prefix) {
        const tmpDir = new TempDirectory(prefix);
        await tmpDir.init();
        return tmpDir;
    }
    static disposeDirectoriesSync() {
        Object.values(USED_TEMP_DIRS).forEach(tmpDir => tmpDir._disposeSync());
    }
    async init() {
        await (0, make_dir_1.default)(TempDirectory.TEMP_DIRECTORIES_ROOT);
        const tmpDirNames = await this._getTmpDirsList(this.namePrefix);
        DEBUG_LOGGER('Found temp directories:', tmpDirNames);
        const existingTmpDirFound = await this._findFreeTmpDir(tmpDirNames);
        if (!existingTmpDirFound)
            await this._createNewTmpDir();
        DEBUG_LOGGER('Temp directory path: ', this.path);
        await cleanup_process_1.default.init();
        await cleanup_process_1.default.addDirectory(this.path);
        USED_TEMP_DIRS[this.path] = this;
    }
    async dispose() {
        if (!USED_TEMP_DIRS[this.path])
            return;
        this.lockFile.dispose();
        await cleanup_process_1.default.removeDirectory(this.path);
        delete USED_TEMP_DIRS[this.path];
    }
}
exports.default = TempDirectory;
// NOTE: exposed for testing purposes
TempDirectory.TEMP_DIRECTORIES_ROOT = TESTCAFE_TMP_DIRS_ROOT;
(0, async_exit_hook_1.default)(TempDirectory.disposeDirectoriesSync);
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,