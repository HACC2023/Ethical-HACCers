"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionLogger = exports.reporterLogger = exports.testRunControllerLogger = exports.requestPipelineContextLogger = exports.requestPipelineOtherRequestLogger = exports.requestPipelineServiceRequestLogger = exports.requestPipelineInternalRequestLogger = exports.requestPipelineMockLogger = exports.requestHooksEventProviderLogger = exports.chromeBrowserProviderLogger = exports.resourceInjectorLogger = exports.requestPipelineLogger = exports.nativeAutomationLogger = void 0;
const debug_1 = __importDefault(require("debug"));
const testcafeLogger = (0, debug_1.default)('testcafe');
const nativeAutomationLogger = testcafeLogger.extend('native-automation');
exports.nativeAutomationLogger = nativeAutomationLogger;
const requestPipelineLogger = nativeAutomationLogger.extend('request-pipeline');
exports.requestPipelineLogger = requestPipelineLogger;
const requestPipelineContextLogger = requestPipelineLogger.extend('context');
exports.requestPipelineContextLogger = requestPipelineContextLogger;
const requestPipelineMockLogger = requestPipelineLogger.extend('mock');
exports.requestPipelineMockLogger = requestPipelineMockLogger;
const requestPipelineInternalRequestLogger = requestPipelineLogger.extend('internal-request');
exports.requestPipelineInternalRequestLogger = requestPipelineInternalRequestLogger;
const requestPipelineServiceRequestLogger = requestPipelineLogger.extend('service-request');
exports.requestPipelineServiceRequestLogger = requestPipelineServiceRequestLogger;
const requestPipelineOtherRequestLogger = requestPipelineLogger.extend('other-request');
exports.requestPipelineOtherRequestLogger = requestPipelineOtherRequestLogger;
const resourceInjectorLogger = nativeAutomationLogger.extend('resource-injector');
exports.resourceInjectorLogger = resourceInjectorLogger;
const requestHooksLogger = nativeAutomationLogger.extend('request-hooks');
const requestHooksEventProviderLogger = requestHooksLogger.extend('event-provider');
exports.requestHooksEventProviderLogger = requestHooksEventProviderLogger;
const browserLogger = testcafeLogger.extend('browser');
const browserProviderLogger = browserLogger.extend('provider');
const chromeBrowserProviderLogger = browserProviderLogger.extend('chrome');
exports.chromeBrowserProviderLogger = chromeBrowserProviderLogger;
const runnerLogger = testcafeLogger.extend('runner');
const testRunControllerLogger = runnerLogger.extend('test-run-controller');
exports.testRunControllerLogger = testRunControllerLogger;
const reporterLogger = testcafeLogger.extend('reporter');
exports.reporterLogger = reporterLogger;
const versionLogger = testcafeLogger.extend('version');
exports.versionLogger = versionLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWJ1Zy1sb2dnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixNQUFNLGNBQWMsR0FBRyxJQUFBLGVBQUssRUFBQyxVQUFVLENBQUMsQ0FBQztBQUV6QyxNQUFNLHNCQUFzQixHQUFpQixjQUFjLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUF3QnBGLHdEQUFzQjtBQXZCMUIsTUFBTSxxQkFBcUIsR0FBa0Isc0JBQXNCLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUF3QjNGLHNEQUFxQjtBQXZCekIsTUFBTSw0QkFBNEIsR0FBVyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUErQmpGLG9FQUE0QjtBQTlCaEMsTUFBTSx5QkFBeUIsR0FBYyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUEwQjlFLDhEQUF5QjtBQXpCN0IsTUFBTSxvQ0FBb0MsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQTBCMUYsb0ZBQW9DO0FBekJ4QyxNQUFNLG1DQUFtQyxHQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBMEJ6RixrRkFBbUM7QUF6QnZDLE1BQU0saUNBQWlDLEdBQU0scUJBQXFCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBMEJ2Riw4RUFBaUM7QUF6QnJDLE1BQU0sc0JBQXNCLEdBQWlCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBbUI1Rix3REFBc0I7QUFsQjFCLE1BQU0sa0JBQWtCLEdBQXFCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1RixNQUFNLCtCQUErQixHQUFRLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBbUJyRiwwRUFBK0I7QUFqQm5DLE1BQU0sYUFBYSxHQUFpQixjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0scUJBQXFCLEdBQVMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRSxNQUFNLDJCQUEyQixHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQWN2RSxrRUFBMkI7QUFaL0IsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVyRCxNQUFNLHVCQUF1QixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQWlCdkUsMERBQXVCO0FBZjNCLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFnQnJELHdDQUFjO0FBZGxCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFlbkQsc0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCB0ZXN0Y2FmZUxvZ2dlciA9IGRlYnVnKCd0ZXN0Y2FmZScpO1xuXG5jb25zdCBuYXRpdmVBdXRvbWF0aW9uTG9nZ2VyICAgICAgICAgICAgICAgPSB0ZXN0Y2FmZUxvZ2dlci5leHRlbmQoJ25hdGl2ZS1hdXRvbWF0aW9uJyk7XG5jb25zdCByZXF1ZXN0UGlwZWxpbmVMb2dnZXIgICAgICAgICAgICAgICAgPSBuYXRpdmVBdXRvbWF0aW9uTG9nZ2VyLmV4dGVuZCgncmVxdWVzdC1waXBlbGluZScpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lQ29udGV4dExvZ2dlciAgICAgICAgID0gcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLmV4dGVuZCgnY29udGV4dCcpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lTW9ja0xvZ2dlciAgICAgICAgICAgID0gcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLmV4dGVuZCgnbW9jaycpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lSW50ZXJuYWxSZXF1ZXN0TG9nZ2VyID0gcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLmV4dGVuZCgnaW50ZXJuYWwtcmVxdWVzdCcpO1xuY29uc3QgcmVxdWVzdFBpcGVsaW5lU2VydmljZVJlcXVlc3RMb2dnZXIgID0gcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLmV4dGVuZCgnc2VydmljZS1yZXF1ZXN0Jyk7XG5jb25zdCByZXF1ZXN0UGlwZWxpbmVPdGhlclJlcXVlc3RMb2dnZXIgICAgPSByZXF1ZXN0UGlwZWxpbmVMb2dnZXIuZXh0ZW5kKCdvdGhlci1yZXF1ZXN0Jyk7XG5jb25zdCByZXNvdXJjZUluamVjdG9yTG9nZ2VyICAgICAgICAgICAgICAgPSBuYXRpdmVBdXRvbWF0aW9uTG9nZ2VyLmV4dGVuZCgncmVzb3VyY2UtaW5qZWN0b3InKTtcbmNvbnN0IHJlcXVlc3RIb29rc0xvZ2dlciAgICAgICAgICAgICAgICAgICA9IG5hdGl2ZUF1dG9tYXRpb25Mb2dnZXIuZXh0ZW5kKCdyZXF1ZXN0LWhvb2tzJyk7XG5jb25zdCByZXF1ZXN0SG9va3NFdmVudFByb3ZpZGVyTG9nZ2VyICAgICAgPSByZXF1ZXN0SG9va3NMb2dnZXIuZXh0ZW5kKCdldmVudC1wcm92aWRlcicpO1xuXG5jb25zdCBicm93c2VyTG9nZ2VyICAgICAgICAgICAgICAgPSB0ZXN0Y2FmZUxvZ2dlci5leHRlbmQoJ2Jyb3dzZXInKTtcbmNvbnN0IGJyb3dzZXJQcm92aWRlckxvZ2dlciAgICAgICA9IGJyb3dzZXJMb2dnZXIuZXh0ZW5kKCdwcm92aWRlcicpO1xuY29uc3QgY2hyb21lQnJvd3NlclByb3ZpZGVyTG9nZ2VyID0gYnJvd3NlclByb3ZpZGVyTG9nZ2VyLmV4dGVuZCgnY2hyb21lJyk7XG5cbmNvbnN0IHJ1bm5lckxvZ2dlciA9IHRlc3RjYWZlTG9nZ2VyLmV4dGVuZCgncnVubmVyJyk7XG5cbmNvbnN0IHRlc3RSdW5Db250cm9sbGVyTG9nZ2VyID0gcnVubmVyTG9nZ2VyLmV4dGVuZCgndGVzdC1ydW4tY29udHJvbGxlcicpO1xuXG5jb25zdCByZXBvcnRlckxvZ2dlciA9IHRlc3RjYWZlTG9nZ2VyLmV4dGVuZCgncmVwb3J0ZXInKTtcblxuY29uc3QgdmVyc2lvbkxvZ2dlciA9IHRlc3RjYWZlTG9nZ2VyLmV4dGVuZCgndmVyc2lvbicpO1xuXG5leHBvcnQge1xuICAgIG5hdGl2ZUF1dG9tYXRpb25Mb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyLFxuICAgIHJlc291cmNlSW5qZWN0b3JMb2dnZXIsXG4gICAgY2hyb21lQnJvd3NlclByb3ZpZGVyTG9nZ2VyLFxuICAgIHJlcXVlc3RIb29rc0V2ZW50UHJvdmlkZXJMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lTW9ja0xvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVJbnRlcm5hbFJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lU2VydmljZVJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lT3RoZXJSZXF1ZXN0TG9nZ2VyLFxuICAgIHJlcXVlc3RQaXBlbGluZUNvbnRleHRMb2dnZXIsXG4gICAgdGVzdFJ1bkNvbnRyb2xsZXJMb2dnZXIsXG4gICAgcmVwb3J0ZXJMb2dnZXIsXG4gICAgdmVyc2lvbkxvZ2dlcixcbn07XG4iXX0=