"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const type_1 = __importDefault(require("./type"));
function getFn(command) {
    switch (command.assertionType) {
        case type_1.default.eql:
            return () => chai_1.assert.deepEqual(command.actual, command.expected, command.message);
        case type_1.default.notEql:
            return () => chai_1.assert.notDeepEqual(command.actual, command.expected, command.message);
        case type_1.default.ok:
            return () => chai_1.assert.isOk(command.actual, command.message);
        case type_1.default.notOk:
            return () => chai_1.assert.isNotOk(command.actual, command.message);
        case type_1.default.contains:
            return () => chai_1.assert.include(command.actual, command.expected, command.message);
        case type_1.default.notContains:
            return () => chai_1.assert.notInclude(command.actual, command.expected, command.message);
        case type_1.default.typeOf:
            return () => chai_1.assert.typeOf(command.actual, command.expected, command.message);
        case type_1.default.notTypeOf:
            return () => chai_1.assert.notTypeOf(command.actual, command.expected, command.message);
        case type_1.default.gt:
            return () => chai_1.assert.isAbove(command.actual, command.expected, command.message);
        case type_1.default.gte:
            return () => chai_1.assert.isAtLeast(command.actual, command.expected, command.message);
        case type_1.default.lt:
            return () => chai_1.assert.isBelow(command.actual, command.expected, command.message);
        case type_1.default.lte:
            return () => chai_1.assert.isAtMost(command.actual, command.expected, command.message);
        case type_1.default.within:
            return () => (0, chai_1.expect)(command.actual).to.be.within(command.expected, command.expected2, command.message);
        case type_1.default.notWithin:
            return () => (0, chai_1.expect)(command.actual).not.to.be.within(command.expected, command.expected2, command.message);
        case type_1.default.match:
            return () => chai_1.assert.match(command.actual, command.expected, command.message);
        case type_1.default.notMatch:
            return () => chai_1.assert.notMatch(command.actual, command.expected, command.message);
        default:
            return () => void 0;
    }
}
exports.default = getFn;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Fzc2VydGlvbnMvZ2V0LWZuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQXNDO0FBQ3RDLGtEQUFvQztBQUdwQyxTQUF3QixLQUFLLENBQUUsT0FBeUI7SUFDcEQsUUFBUSxPQUFPLENBQUMsYUFBYSxFQUFFO1FBQzNCLEtBQUssY0FBYyxDQUFDLEdBQUc7WUFDbkIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckYsS0FBSyxjQUFjLENBQUMsTUFBTTtZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RixLQUFLLGNBQWMsQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5RCxLQUFLLGNBQWMsQ0FBQyxLQUFLO1lBQ3JCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRSxLQUFLLGNBQWMsQ0FBQyxRQUFRO1lBQ3hCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBZ0IsRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkcsS0FBSyxjQUFjLENBQUMsV0FBVztZQUMzQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQWdCLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEcsS0FBSyxjQUFjLENBQUMsTUFBTTtZQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUYsS0FBSyxjQUFjLENBQUMsU0FBUztZQUN6QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0YsS0FBSyxjQUFjLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQWdCLEVBQUUsT0FBTyxDQUFDLFFBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZHLEtBQUssY0FBYyxDQUFDLEdBQUc7WUFDbkIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFnQixFQUFFLE9BQU8sQ0FBQyxRQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV6RyxLQUFLLGNBQWMsQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBZ0IsRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkcsS0FBSyxjQUFjLENBQUMsR0FBRztZQUNuQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQWdCLEVBQUUsT0FBTyxDQUFDLFFBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhHLEtBQUssY0FBYyxDQUFDLE1BQU07WUFDdEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFBLGFBQU0sRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQWtCLEVBQUUsT0FBTyxDQUFDLFNBQW1CLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRS9ILEtBQUssY0FBYyxDQUFDLFNBQVM7WUFDekIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFBLGFBQU0sRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFrQixFQUFFLE9BQU8sQ0FBQyxTQUFtQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuSSxLQUFLLGNBQWMsQ0FBQyxLQUFLO1lBQ3JCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBZ0IsRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckcsS0FBSyxjQUFjLENBQUMsUUFBUTtZQUN4QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFOUY7WUFDSSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzNCO0FBQ0wsQ0FBQztBQXJERCx3QkFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQsIGV4cGVjdCB9IGZyb20gJ2NoYWknO1xuaW1wb3J0IEFTU0VSVElPTl9UWVBFIGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgeyBBc3NlcnRpb25Db21tYW5kIH0gZnJvbSAnLi4vdGVzdC1ydW4vY29tbWFuZHMvYXNzZXJ0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Rm4gKGNvbW1hbmQ6IEFzc2VydGlvbkNvbW1hbmQpOiBGdW5jdGlvbiB7XG4gICAgc3dpdGNoIChjb21tYW5kLmFzc2VydGlvblR5cGUpIHtcbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5lcWw6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmRlZXBFcXVhbChjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdEVxbDpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQubm90RGVlcEVxdWFsKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUub2s6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmlzT2soY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ub3RPazpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNOb3RPayhjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmNvbnRhaW5zOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5pbmNsdWRlKGNvbW1hbmQuYWN0dWFsIGFzIHN0cmluZywgY29tbWFuZC5leHBlY3RlZCBhcyBzdHJpbmcsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ub3RDb250YWluczpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQubm90SW5jbHVkZShjb21tYW5kLmFjdHVhbCBhcyBzdHJpbmcsIGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS50eXBlT2Y6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LnR5cGVPZihjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCBhcyBzdHJpbmcsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ub3RUeXBlT2Y6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0Lm5vdFR5cGVPZihjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCBhcyBzdHJpbmcsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ndDpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNBYm92ZShjb21tYW5kLmFjdHVhbCBhcyBudW1iZXIsIGNvbW1hbmQuZXhwZWN0ZWQgYXMgbnVtYmVyLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUuZ3RlOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5pc0F0TGVhc3QoY29tbWFuZC5hY3R1YWwgYXMgbnVtYmVyLCBjb21tYW5kLmV4cGVjdGVkIGFzIG51bWJlciwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmx0OlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5pc0JlbG93KGNvbW1hbmQuYWN0dWFsIGFzIG51bWJlciwgY29tbWFuZC5leHBlY3RlZCBhcyBudW1iZXIsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5sdGU6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmlzQXRNb3N0KGNvbW1hbmQuYWN0dWFsIGFzIG51bWJlciwgY29tbWFuZC5leHBlY3RlZCBhcyBudW1iZXIsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS53aXRoaW46XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gZXhwZWN0KGNvbW1hbmQuYWN0dWFsKS50by5iZS53aXRoaW4oY29tbWFuZC5leHBlY3RlZCBhcyBudW1iZXIsIGNvbW1hbmQuZXhwZWN0ZWQyIGFzIG51bWJlciwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdFdpdGhpbjpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBleHBlY3QoY29tbWFuZC5hY3R1YWwpLm5vdC50by5iZS53aXRoaW4oY29tbWFuZC5leHBlY3RlZCBhcyBudW1iZXIsIGNvbW1hbmQuZXhwZWN0ZWQyIGFzIG51bWJlciwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm1hdGNoOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5tYXRjaChjb21tYW5kLmFjdHVhbCBhcyBzdHJpbmcsIGNvbW1hbmQuZXhwZWN0ZWQgYXMgUmVnRXhwLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubm90TWF0Y2g6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0Lm5vdE1hdGNoKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkIGFzIFJlZ0V4cCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHZvaWQgMDtcbiAgICB9XG59XG4iXX0=