"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestHooksArgument = exports.skipJsErrorOptions = exports.urlArgument = exports.urlsArgument = exports.setCookiesArgument = exports.cookiesArgument = exports.functionArgument = exports.screenshotPathArgument = exports.resizeWindowDeviceArgument = exports.stringOrStringArrayArgument = exports.pageUrlArgument = exports.nullableStringArgument = exports.nonEmptyStringArgument = exports.stringArgument = exports.actionOptions = exports.actionRoleArgument = exports.setSpeedArgument = exports.booleanArgument = exports.positiveIntegerArgument = exports.integerArgument = void 0;
const device_specs_1 = require("device-specs");
const marker_symbol_1 = __importDefault(require("../../../role/marker-symbol"));
const factories_1 = require("./factories");
const test_run_1 = require("../../../errors/test-run");
const url_1 = require("url");
const test_page_url_1 = require("../../../api/test-page-url");
const check_file_path_1 = __importDefault(require("../../../utils/check-file-path"));
const lodash_1 = require("lodash");
const assert_type_1 = __importDefault(require("../../../api/request-hooks/assert-type"));
// Validators
exports.integerArgument = (0, factories_1.createIntegerValidator)(test_run_1.ActionIntegerArgumentError);
exports.positiveIntegerArgument = (0, factories_1.createPositiveIntegerValidator)(test_run_1.ActionPositiveIntegerArgumentError);
exports.booleanArgument = (0, factories_1.createBooleanValidator)(test_run_1.ActionBooleanArgumentError);
exports.setSpeedArgument = (0, factories_1.createSpeedValidator)(test_run_1.SetTestSpeedArgumentError);
function actionRoleArgument(name, val) {
    if (!val || !val[marker_symbol_1.default])
        throw new test_run_1.ActionRoleArgumentError(name, typeof val);
}
exports.actionRoleArgument = actionRoleArgument;
function actionOptions(name, val) {
    const type = typeof val;
    if (type !== 'object' && val !== null && val !== void 0)
        throw new test_run_1.ActionOptionsTypeError(type);
}
exports.actionOptions = actionOptions;
function stringArgument(argument, val, createError) {
    if (!createError)
        createError = actualValue => new test_run_1.ActionStringArgumentError(argument, actualValue);
    const type = typeof val;
    if (type !== 'string')
        throw createError(type);
}
exports.stringArgument = stringArgument;
function nonEmptyStringArgument(argument, val, createError) {
    if (!createError)
        createError = actualValue => new test_run_1.ActionStringArgumentError(argument, actualValue);
    stringArgument(argument, val, createError);
    if (!val.length)
        throw createError('""');
}
exports.nonEmptyStringArgument = nonEmptyStringArgument;
function nullableStringArgument(argument, val) {
    const type = typeof val;
    if (type !== 'string' && val !== null)
        throw new test_run_1.ActionNullableStringArgumentError(argument, type);
}
exports.nullableStringArgument = nullableStringArgument;
function pageUrlArgument(name, val) {
    nonEmptyStringArgument(name, val);
    (0, test_page_url_1.assertPageUrl)(val.trim(), 'navigateTo');
}
exports.pageUrlArgument = pageUrlArgument;
function stringOrStringArrayArgument(argument, val) {
    const type = typeof val;
    if (type === 'string') {
        if (!val.length)
            throw new test_run_1.ActionStringOrStringArrayArgumentError(argument, '""');
    }
    else if (Array.isArray(val)) {
        if (!val.length)
            throw new test_run_1.ActionStringOrStringArrayArgumentError(argument, '[]');
        const validateElement = elementIndex => nonEmptyStringArgument(argument, val[elementIndex], actualValue => new test_run_1.ActionStringArrayElementError(argument, actualValue, elementIndex));
        for (let i = 0; i < val.length; i++)
            validateElement(i);
    }
    else
        throw new test_run_1.ActionStringOrStringArrayArgumentError(argument, type);
}
exports.stringOrStringArrayArgument = stringOrStringArrayArgument;
function resizeWindowDeviceArgument(name, val) {
    nonEmptyStringArgument(name, val);
    if (!(0, device_specs_1.isValidDeviceName)(val))
        throw new test_run_1.ActionUnsupportedDeviceTypeError(name, val);
}
exports.resizeWindowDeviceArgument = resizeWindowDeviceArgument;
function screenshotPathArgument(name, val) {
    nonEmptyStringArgument(name, val);
    const forbiddenCharsList = (0, check_file_path_1.default)(val);
    if (forbiddenCharsList.length)
        throw new test_run_1.ForbiddenCharactersInScreenshotPathError(val, forbiddenCharsList);
}
exports.screenshotPathArgument = screenshotPathArgument;
function functionArgument(name, val) {
    if (typeof val !== 'function')
        throw new test_run_1.ActionFunctionArgumentError(name, val);
}
exports.functionArgument = functionArgument;
function isValidCookie(cookie) {
    return !!cookie && (typeof cookie === 'object' || typeof cookie === 'string');
}
function cookiesArgument(name, val) {
    const cookiesLength = val.length;
    for (const [i, value] of val.entries()) {
        if (!isValidCookie(value)) {
            throw cookiesLength === 1
                ? new test_run_1.ActionCookieArgumentError()
                : new test_run_1.ActionCookieArgumentsError(i, value);
        }
    }
}
exports.cookiesArgument = cookiesArgument;
function setCookiesArgument(name, val) {
    if (!val.length)
        throw new test_run_1.ActionRequiredCookieArguments();
    cookiesArgument(name, val);
}
exports.setCookiesArgument = setCookiesArgument;
function isValidUrl(url) {
    try {
        return new url_1.URL(url) && true;
    }
    catch (_a) {
        return false;
    }
}
function urlsArgument(name, val) {
    const castVal = (0, lodash_1.castArray)(val);
    for (const [i, value] of castVal.entries()) {
        if (!isValidUrl(value)) {
            throw castVal.length === 1
                ? new test_run_1.ActionUrlCookieArgumentError()
                : new test_run_1.ActionUrlsCookieArgumentError(i, value);
        }
    }
}
exports.urlsArgument = urlsArgument;
function urlArgument(name, val) {
    const valType = typeof val;
    if (valType !== 'string' && !(val instanceof url_1.URL))
        throw new test_run_1.ActionUrlArgumentError(name, valType);
}
exports.urlArgument = urlArgument;
function skipJsErrorOptions(name, val) {
    const valType = typeof val;
    if (valType !== 'undefined' && valType !== 'object' && valType !== 'boolean' && valType !== 'function')
        throw new test_run_1.ActionSkipJsErrorsArgumentTypeError(name, valType);
}
exports.skipJsErrorOptions = skipJsErrorOptions;
function requestHooksArgument(name, val) {
    (0, assert_type_1.default)(val);
}
exports.requestHooksArgument = requestHooksArgument;
//# sourceMappingURL=data:application/json;base64,