"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetActiveElementCommand = exports.UnlockPageCommand = exports.BackupStoragesCommand = exports.TestDoneCommand = exports.SetBreakpointCommand = exports.HideAssertionRetriesStatusCommand = exports.ShowAssertionRetriesStatusCommand = void 0;
const type_1 = __importDefault(require("./type"));
// Commands
class ShowAssertionRetriesStatusCommand {
    constructor(timeout) {
        this.type = type_1.default.showAssertionRetriesStatus;
        this.timeout = timeout;
    }
}
exports.ShowAssertionRetriesStatusCommand = ShowAssertionRetriesStatusCommand;
class HideAssertionRetriesStatusCommand {
    constructor(success) {
        this.type = type_1.default.hideAssertionRetriesStatus;
        this.success = success;
    }
}
exports.HideAssertionRetriesStatusCommand = HideAssertionRetriesStatusCommand;
class SetBreakpointCommand {
    constructor(isTestError) {
        this.type = type_1.default.setBreakpoint;
        this.isTestError = isTestError;
    }
}
exports.SetBreakpointCommand = SetBreakpointCommand;
class TestDoneCommand {
    constructor() {
        this.type = type_1.default.testDone;
    }
}
exports.TestDoneCommand = TestDoneCommand;
class BackupStoragesCommand {
    constructor() {
        this.type = type_1.default.backupStorages;
    }
}
exports.BackupStoragesCommand = BackupStoragesCommand;
class UnlockPageCommand {
    constructor() {
        this.type = type_1.default.unlockPage;
    }
}
exports.UnlockPageCommand = UnlockPageCommand;
class GetActiveElementCommand {
    constructor() {
        this.type = type_1.default.getActiveElement;
    }
}
exports.GetActiveElementCommand = GetActiveElementCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixXQUFXO0FBQ1gsTUFBYSxpQ0FBaUM7SUFDMUMsWUFBYSxPQUFPO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQU0sY0FBSSxDQUFDLDBCQUEwQixDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQUxELDhFQUtDO0FBRUQsTUFBYSxpQ0FBaUM7SUFDMUMsWUFBYSxPQUFPO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQU0sY0FBSSxDQUFDLDBCQUEwQixDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQUxELDhFQUtDO0FBRUQsTUFBYSxvQkFBb0I7SUFDN0IsWUFBYSxXQUFXO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQVUsY0FBSSxDQUFDLGFBQWEsQ0FBQztRQUN0QyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNuQyxDQUFDO0NBQ0o7QUFMRCxvREFLQztBQUVELE1BQWEsZUFBZTtJQUN4QjtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUFKRCwwQ0FJQztBQUVELE1BQWEscUJBQXFCO0lBQzlCO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxjQUFJLENBQUMsY0FBYyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQUpELHNEQUlDO0FBRUQsTUFBYSxpQkFBaUI7SUFDMUI7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQUksQ0FBQyxVQUFVLENBQUM7SUFDaEMsQ0FBQztDQUNKO0FBSkQsOENBSUM7QUFFRCxNQUFhLHVCQUF1QjtJQUNoQztRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ3RDLENBQUM7Q0FDSjtBQUpELDBEQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcblxuLy8gQ29tbWFuZHNcbmV4cG9ydCBjbGFzcyBTaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1c0NvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yICh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMudHlwZSAgICA9IFRZUEUuc2hvd0Fzc2VydGlvblJldHJpZXNTdGF0dXM7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSGlkZUFzc2VydGlvblJldHJpZXNTdGF0dXNDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvciAoc3VjY2Vzcykge1xuICAgICAgICB0aGlzLnR5cGUgICAgPSBUWVBFLmhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzO1xuICAgICAgICB0aGlzLnN1Y2Nlc3MgPSBzdWNjZXNzO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNldEJyZWFrcG9pbnRDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvciAoaXNUZXN0RXJyb3IpIHtcbiAgICAgICAgdGhpcy50eXBlICAgICAgICA9IFRZUEUuc2V0QnJlYWtwb2ludDtcbiAgICAgICAgdGhpcy5pc1Rlc3RFcnJvciA9IGlzVGVzdEVycm9yO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRlc3REb25lQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLnRlc3REb25lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhY2t1cFN0b3JhZ2VzQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLmJhY2t1cFN0b3JhZ2VzO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVubG9ja1BhZ2VDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IFRZUEUudW5sb2NrUGFnZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHZXRBY3RpdmVFbGVtZW50Q29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLmdldEFjdGl2ZUVsZW1lbnQ7XG4gICAgfVxufVxuIl19