"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const types_2 = require("./types");
// @ts-ignore
const hammerhead_1 = __importDefault(require("../../client/core/deps/hammerhead"));
const utils_1 = require("./utils");
const send_request_to_frame_1 = __importDefault(require("../../client/core/utils/send-request-to-frame"));
const dom_1 = require("../../client/core/utils/dom");
const style_1 = require("../../client/core/utils/style");
const { utils, eventSandbox, nativeMethods } = hammerhead_1.default;
const messageSandbox = eventSandbox.message;
const MOUSE_EVENT_OPTIONS = {
    clickCount: 1,
    force: 0.5,
};
const CALCULATE_TOP_LEFT_POINT_REQUEST_CMD = 'native-automation|calculate-top-left-point|request';
const CALCULATE_TOP_LEFT_POINT_RESPONSE_CMD = 'native-automation|calculate-top-left-point|response';
function getLeftTopPoint(driverIframe) {
    const rect = driverIframe.getBoundingClientRect();
    const borders = (0, style_1.getBordersWidthFloat)(driverIframe);
    const paddings = (0, style_1.getElementPaddingFloat)(driverIframe);
    return {
        x: rect.left + borders.left + paddings.left,
        y: rect.top + borders.top + paddings.top,
    };
}
// Setup cross-iframe interaction
messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, async (e) => {
    if (e.message.cmd === CALCULATE_TOP_LEFT_POINT_REQUEST_CMD) {
        const iframeWin = e.source;
        const { x, y } = await calculateIFrameTopLeftPoint();
        const iframe = (0, dom_1.findIframeByWindow)(iframeWin);
        const topLeftPoint = getLeftTopPoint(iframe);
        const responseMsg = {
            cmd: CALCULATE_TOP_LEFT_POINT_RESPONSE_CMD,
            topLeftPoint: {
                x: topLeftPoint.x + x,
                y: topLeftPoint.y + y,
            },
        };
        messageSandbox.sendServiceMsg(responseMsg, iframeWin);
    }
});
async function calculateIFrameTopLeftPoint() {
    if (window !== window.parent) {
        const msg = {
            cmd: CALCULATE_TOP_LEFT_POINT_REQUEST_CMD,
        };
        const { topLeftPoint } = await (0, send_request_to_frame_1.default)(msg, CALCULATE_TOP_LEFT_POINT_RESPONSE_CMD, window.parent);
        return topLeftPoint;
    }
    return { x: 0, y: 0 };
}
class CDPEventDescriptor {
    static _isNonCharKeyModifier(modifiers) {
        const nonCharModifiers = [types_2.KeyModifierValues.ctrl, types_2.KeyModifierValues.alt, types_2.KeyModifierValues.meta];
        return nativeMethods.arrayIndexOf.call(nonCharModifiers, modifiers) > -1;
    }
    static _getKeyDownEventText(options) {
        if (options.isNewLine)
            return '\r';
        if (options.keyProperty.length === 1 && !CDPEventDescriptor._isNonCharKeyModifier(options.modifiers))
            return options.keyProperty;
        return '';
    }
    static createKeyDownOptions(options) {
        const text = CDPEventDescriptor._getKeyDownEventText(options);
        return {
            type: text ? 'keyDown' : 'rawKeyDown',
            modifiers: options.modifiers || 0,
            windowsVirtualKeyCode: options.keyCode,
            key: options.keyProperty,
            commands: options.commands,
            text,
        };
    }
    static createKeyUpOptions(options) {
        return {
            type: 'keyUp',
            modifiers: options.modifiers || 0,
            key: options.keyProperty,
            windowsVirtualKeyCode: options.keyCode,
        };
    }
    static async createMouseEventOptions(type, options) {
        const { x, y } = await calculateIFrameTopLeftPoint();
        return utils.extend({
            x: options.options.clientX + x,
            y: options.options.clientY + y,
            modifiers: (0, utils_1.calculateKeyModifiersValue)(options.options),
            button: (0, utils_1.calculateMouseButtonValue)(options.options),
            type,
        }, MOUSE_EVENT_OPTIONS);
    }
    static delay(delay) {
        return {
            type: types_1.EventType.Delay,
            options: { delay },
        };
    }
    static keyDown(keyInfo) {
        return {
            type: types_1.EventType.Keyboard,
            options: CDPEventDescriptor.createKeyDownOptions(keyInfo),
        };
    }
    static keyUp(keyInfo) {
        return {
            type: types_1.EventType.Keyboard,
            options: CDPEventDescriptor.createKeyUpOptions(keyInfo),
        };
    }
}
exports.default = CDPEventDescriptor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,