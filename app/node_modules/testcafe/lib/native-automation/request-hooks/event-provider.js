"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const string_1 = require("../utils/string");
const cdp_1 = require("../utils/cdp");
class NativeAutomationRequestHookEventProvider extends testcafe_hammerhead_1.RequestHookEventProvider {
    static _hasResponseWithBody(context) {
        return context.onResponseEventData.some((eventData) => eventData.opts.includeBody);
    }
    static async _safeGetResponseBody(client, event) {
        try {
            const responseObj = await client.Fetch.getResponseBody({ requestId: event.requestId });
            return (0, string_1.getResponseAsBuffer)(responseObj);
        }
        catch (_a) {
            // NOTE: The 'Fetch.getResponseBody' method crashes on some Protobuf requests (https://protobuf.dev/).
            // This is a bug of the Chrome DevTools Protocol.
            return Buffer.alloc(0);
        }
    }
    static async _setResponseBody({ pipelineContext, resourceBody, eventFactory, event, client }) {
        if ((resourceBody === null || resourceBody === void 0 ? void 0 : resourceBody.length) || (0, cdp_1.isPreflightRequest)(event)) {
            eventFactory.setResponseBody(resourceBody || Buffer.alloc(0));
            return;
        }
        const hasOnResponseWithBody = NativeAutomationRequestHookEventProvider._hasResponseWithBody(pipelineContext);
        if (!hasOnResponseWithBody)
            return;
        const responseBody = await NativeAutomationRequestHookEventProvider._safeGetResponseBody(client, event);
        eventFactory.setResponseBody(responseBody);
    }
    async onRequest(event, contextInfo) {
        if (!this.hasRequestEventListeners())
            return;
        const { pipelineContext, eventFactory } = contextInfo.getContextData(event);
        await pipelineContext.onRequestHookRequest(this, eventFactory);
    }
    async onResponse(event, resourceBody, contextInfo, client) {
        let modified = false;
        if (!this.hasRequestEventListeners())
            return false;
        const { pipelineContext, eventFactory } = contextInfo.getContextData(event);
        // NOTE: A long request can be responded after the test is finished.
        if (!eventFactory)
            return false;
        eventFactory.update(event);
        await pipelineContext.onRequestHookConfigureResponse(this, eventFactory);
        if (eventFactory.headersModified)
            modified = true;
        await NativeAutomationRequestHookEventProvider._setResponseBody({
            pipelineContext,
            resourceBody,
            eventFactory,
            event,
            client,
        });
        await Promise.all(pipelineContext.onResponseEventData.map(async (eventData) => {
            await pipelineContext.onRequestHookResponse(this, eventFactory, eventData.rule, eventData.opts);
        }));
        return modified;
    }
}
exports.default = NativeAutomationRequestHookEventProvider;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,