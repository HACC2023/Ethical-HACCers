"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const cdp_1 = require("../../utils/cdp");
class FrameNavigatedEventBasedEventFactory extends testcafe_hammerhead_1.BaseRequestHookEventFactory {
    constructor(event, sessionId) {
        super();
        this._event = event;
        this._sessionId = sessionId;
    }
    createRequestInfo() {
        // NOTE: We can't get some request information from the FrameNavigated event.
        // So, we initialize the RequestInfo object with empty or default values.
        return new testcafe_hammerhead_1.RequestInfo({
            requestId: (0, cdp_1.getRequestId)(this._event),
            sessionId: this._sessionId,
            userAgent: '',
            url: this._event.frame.url,
            method: '',
            headers: {},
            body: Buffer.alloc(0),
            isAjax: false,
        });
    }
    createConfigureResponseEvent(rule) {
        // NOTE: Used as a stub
        return new testcafe_hammerhead_1.ConfigureResponseEvent(rule, {});
    }
    createRequestOptions() {
        // NOTE: Used as a stub
        return {};
    }
    createResponseInfo() {
        // NOTE: Used as a stub
        return {};
    }
}
exports.default = FrameNavigatedEventBasedEventFactory;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUtbmF2aWdhdGVkLWV2ZW50LWJhc2VkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL25hdGl2ZS1hdXRvbWF0aW9uL3JlcXVlc3QtaG9va3MvZXZlbnQtZmFjdG9yeS9mcmFtZS1uYXZpZ2F0ZWQtZXZlbnQtYmFzZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2REFRNkI7QUFHN0IseUNBQStDO0FBRS9DLE1BQXFCLG9DQUFxQyxTQUFRLGlEQUEyQjtJQUd6RixZQUFvQixLQUEwQixFQUFFLFNBQWlCO1FBQzdELEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLE1BQU0sR0FBTyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUVNLGlCQUFpQjtRQUNwQiw2RUFBNkU7UUFDN0UseUVBQXlFO1FBQ3pFLE9BQU8sSUFBSSxpQ0FBVyxDQUFDO1lBQ25CLFNBQVMsRUFBRSxJQUFBLGtCQUFZLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNwQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDMUIsU0FBUyxFQUFFLEVBQUU7WUFDYixHQUFHLEVBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRztZQUNoQyxNQUFNLEVBQUssRUFBRTtZQUNiLE9BQU8sRUFBSSxFQUFFO1lBQ2IsSUFBSSxFQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sRUFBSyxLQUFLO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSw0QkFBNEIsQ0FBRSxJQUF1QjtRQUN4RCx1QkFBdUI7UUFDdkIsT0FBTyxJQUFJLDRDQUFzQixDQUFDLElBQUksRUFBRSxFQUE2QixDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVNLG9CQUFvQjtRQUN2Qix1QkFBdUI7UUFDdkIsT0FBTyxFQUFvQixDQUFDO0lBQ2hDLENBQUM7SUFFTSxrQkFBa0I7UUFDckIsdUJBQXVCO1FBQ3ZCLE9BQU8sRUFBa0IsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUF2Q0QsdURBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBCYXNlUmVxdWVzdEhvb2tFdmVudEZhY3RvcnksXG4gICAgQ29uZmlndXJlUmVzcG9uc2VFdmVudCxcbiAgICBNb2RpZnlSZXNwb25zZUZ1bmN0aW9ucyxcbiAgICBSZXF1ZXN0RmlsdGVyUnVsZSxcbiAgICBSZXF1ZXN0SW5mbyxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBSZXNwb25zZUluZm8sXG59IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBGcmFtZU5hdmlnYXRlZEV2ZW50ID0gUHJvdG9jb2wuUGFnZS5GcmFtZU5hdmlnYXRlZEV2ZW50O1xuaW1wb3J0IHsgZ2V0UmVxdWVzdElkIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2RwJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhbWVOYXZpZ2F0ZWRFdmVudEJhc2VkRXZlbnRGYWN0b3J5IGV4dGVuZHMgQmFzZVJlcXVlc3RIb29rRXZlbnRGYWN0b3J5IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ldmVudDogRnJhbWVOYXZpZ2F0ZWRFdmVudDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zZXNzaW9uSWQ6IHN0cmluZztcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGV2ZW50OiBGcmFtZU5hdmlnYXRlZEV2ZW50LCBzZXNzaW9uSWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2V2ZW50ICAgICA9IGV2ZW50O1xuICAgICAgICB0aGlzLl9zZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZVJlcXVlc3RJbmZvICgpOiBSZXF1ZXN0SW5mbyB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGNhbid0IGdldCBzb21lIHJlcXVlc3QgaW5mb3JtYXRpb24gZnJvbSB0aGUgRnJhbWVOYXZpZ2F0ZWQgZXZlbnQuXG4gICAgICAgIC8vIFNvLCB3ZSBpbml0aWFsaXplIHRoZSBSZXF1ZXN0SW5mbyBvYmplY3Qgd2l0aCBlbXB0eSBvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0SW5mbyh7XG4gICAgICAgICAgICByZXF1ZXN0SWQ6IGdldFJlcXVlc3RJZCh0aGlzLl9ldmVudCksXG4gICAgICAgICAgICBzZXNzaW9uSWQ6IHRoaXMuX3Nlc3Npb25JZCxcbiAgICAgICAgICAgIHVzZXJBZ2VudDogJycsXG4gICAgICAgICAgICB1cmw6ICAgICAgIHRoaXMuX2V2ZW50LmZyYW1lLnVybCxcbiAgICAgICAgICAgIG1ldGhvZDogICAgJycsXG4gICAgICAgICAgICBoZWFkZXJzOiAgIHt9LFxuICAgICAgICAgICAgYm9keTogICAgICBCdWZmZXIuYWxsb2MoMCksXG4gICAgICAgICAgICBpc0FqYXg6ICAgIGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlQ29uZmlndXJlUmVzcG9uc2VFdmVudCAocnVsZTogUmVxdWVzdEZpbHRlclJ1bGUpOiBDb25maWd1cmVSZXNwb25zZUV2ZW50IHtcbiAgICAgICAgLy8gTk9URTogVXNlZCBhcyBhIHN0dWJcbiAgICAgICAgcmV0dXJuIG5ldyBDb25maWd1cmVSZXNwb25zZUV2ZW50KHJ1bGUsIHt9IGFzIE1vZGlmeVJlc3BvbnNlRnVuY3Rpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlUmVxdWVzdE9wdGlvbnMgKCk6IFJlcXVlc3RPcHRpb25zIHtcbiAgICAgICAgLy8gTk9URTogVXNlZCBhcyBhIHN0dWJcbiAgICAgICAgcmV0dXJuIHt9IGFzIFJlcXVlc3RPcHRpb25zO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVSZXNwb25zZUluZm8gKCk6IFJlc3BvbnNlSW5mbyB7XG4gICAgICAgIC8vIE5PVEU6IFVzZWQgYXMgYSBzdHViXG4gICAgICAgIHJldHVybiB7fSBhcyBSZXNwb25zZUluZm87XG4gICAgfVxufVxuIl19