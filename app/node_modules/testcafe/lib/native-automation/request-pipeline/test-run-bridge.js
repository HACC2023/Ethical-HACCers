"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connection_1 = __importDefault(require("../../browser/connection"));
class TestRunBridge {
    constructor(browserId) {
        this._browserId = browserId;
    }
    getBrowserConnection() {
        return connection_1.default.getById(this._browserId);
    }
    getCurrentTestRun() {
        const browserConnection = this.getBrowserConnection();
        return browserConnection.getCurrentTestRun();
    }
    getSessionId() {
        var _a;
        return ((_a = this.getCurrentTestRun()) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    getUserScripts() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.userScripts;
    }
    getInjectableScripts() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.scripts;
    }
    getInjectableStyles() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.styles;
    }
    async getTaskScript({ isIframe }) {
        const browserConnection = this.getBrowserConnection();
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        // @ts-ignore
        return await this.getCurrentTestRun().session.getTaskScript({
            referer: '',
            cookieUrl: '',
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
            isIframe,
        });
    }
}
exports.default = TestRunBridge;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tYnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25hdGl2ZS1hdXRvbWF0aW9uL3JlcXVlc3QtcGlwZWxpbmUvdGVzdC1ydW4tYnJpZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMEVBQXlEO0FBSXpELE1BQXFCLGFBQWE7SUFFOUIsWUFBb0IsU0FBaUI7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUVNLG9CQUFvQjtRQUN2QixPQUFPLG9CQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFzQixDQUFDO0lBQzNFLENBQUM7SUFFTSxpQkFBaUI7UUFDcEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUV0RCxPQUFPLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLFlBQVk7O1FBQ2YsT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLGlCQUFpQixFQUFFLDBDQUFFLEVBQUUsS0FBSSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVNLGNBQWM7UUFDakIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFaEQsSUFBSSxDQUFDLGNBQWM7WUFDZixPQUFPLEVBQUUsQ0FBQztRQUVkLE9BQU8sY0FBYyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDakQsQ0FBQztJQUVNLG9CQUFvQjtRQUN2QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUMsY0FBYztZQUNmLE9BQU8sRUFBRSxDQUFDO1FBRWQsT0FBTyxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztJQUM3QyxDQUFDO0lBRU0sbUJBQW1CO1FBQ3RCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRWhELElBQUksQ0FBQyxjQUFjO1lBQ2YsT0FBTyxFQUFFLENBQUM7UUFFZCxPQUFPLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQzVDLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUUsUUFBUSxFQUE4QjtRQUNoRSxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3RELE1BQU0sS0FBSyxHQUFlLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQztRQUMzRSxNQUFNLFFBQVEsR0FBWSxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7UUFFM0QsYUFBYTtRQUNiLE9BQU8sTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQ3hELE9BQU8sRUFBTSxFQUFFO1lBQ2YsU0FBUyxFQUFJLEVBQUU7WUFDZixXQUFXLEVBQUUsSUFBSTtZQUNqQixVQUFVLEVBQUcsS0FBSyxDQUFDLFdBQVc7WUFDOUIsUUFBUTtZQUNSLFFBQVE7U0FDWCxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUE5REQsZ0NBOERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vLi4vdGVzdC1ydW4nO1xuaW1wb3J0IEJyb3dzZXJDb25uZWN0aW9uIGZyb20gJy4uLy4uL2Jyb3dzZXIvY29ubmVjdGlvbic7XG5pbXBvcnQgeyBVc2VyU2NyaXB0IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlUmVzb3VyY2VzT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJ1bkJyaWRnZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfYnJvd3NlcklkOiBzdHJpbmc7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChicm93c2VySWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9icm93c2VySWQgPSBicm93c2VySWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJyb3dzZXJDb25uZWN0aW9uICgpOiBCcm93c2VyQ29ubmVjdGlvbiB7XG4gICAgICAgIHJldHVybiBCcm93c2VyQ29ubmVjdGlvbi5nZXRCeUlkKHRoaXMuX2Jyb3dzZXJJZCkgYXMgQnJvd3NlckNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldEN1cnJlbnRUZXN0UnVuICgpOiBUZXN0UnVuIHtcbiAgICAgICAgY29uc3QgYnJvd3NlckNvbm5lY3Rpb24gPSB0aGlzLmdldEJyb3dzZXJDb25uZWN0aW9uKCk7XG5cbiAgICAgICAgcmV0dXJuIGJyb3dzZXJDb25uZWN0aW9uLmdldEN1cnJlbnRUZXN0UnVuKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlc3Npb25JZCAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKT8uaWQgfHwgJyc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFVzZXJTY3JpcHRzICgpOiBVc2VyU2NyaXB0W10ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGVzdFJ1biA9IHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKTtcblxuICAgICAgICBpZiAoIWN1cnJlbnRUZXN0UnVuKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgICAgIHJldHVybiBjdXJyZW50VGVzdFJ1bi5pbmplY3RhYmxlLnVzZXJTY3JpcHRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbmplY3RhYmxlU2NyaXB0cyAoKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGVzdFJ1biA9IHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKTtcblxuICAgICAgICBpZiAoIWN1cnJlbnRUZXN0UnVuKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgICAgIHJldHVybiBjdXJyZW50VGVzdFJ1bi5pbmplY3RhYmxlLnNjcmlwdHM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEluamVjdGFibGVTdHlsZXMgKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgY3VycmVudFRlc3RSdW4gPSB0aGlzLmdldEN1cnJlbnRUZXN0UnVuKCk7XG5cbiAgICAgICAgaWYgKCFjdXJyZW50VGVzdFJ1bilcbiAgICAgICAgICAgIHJldHVybiBbXTtcblxuICAgICAgICByZXR1cm4gY3VycmVudFRlc3RSdW4uaW5qZWN0YWJsZS5zdHlsZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFRhc2tTY3JpcHQgKHsgaXNJZnJhbWUgfTogSW5qZWN0YWJsZVJlc291cmNlc09wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBicm93c2VyQ29ubmVjdGlvbiA9IHRoaXMuZ2V0QnJvd3NlckNvbm5lY3Rpb24oKTtcbiAgICAgICAgY29uc3QgcHJveHkgICAgICAgICAgICAgPSBicm93c2VyQ29ubmVjdGlvbi5icm93c2VyQ29ubmVjdGlvbkdhdGV3YXkucHJveHk7XG4gICAgICAgIGNvbnN0IHdpbmRvd0lkICAgICAgICAgID0gYnJvd3NlckNvbm5lY3Rpb24uYWN0aXZlV2luZG93SWQ7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpLnNlc3Npb24uZ2V0VGFza1NjcmlwdCh7XG4gICAgICAgICAgICByZWZlcmVyOiAgICAgJycsXG4gICAgICAgICAgICBjb29raWVVcmw6ICAgJycsXG4gICAgICAgICAgICB3aXRoUGF5bG9hZDogdHJ1ZSxcbiAgICAgICAgICAgIHNlcnZlckluZm86ICBwcm94eS5zZXJ2ZXIxSW5mbyxcbiAgICAgICAgICAgIHdpbmRvd0lkLFxuICAgICAgICAgICAgaXNJZnJhbWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==