"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const injectables_1 = require("../../assets/injectables");
const debug_loggers_1 = require("../../utils/debug-loggers");
const cdp_1 = require("../utils/cdp");
const constants_1 = require("./constants");
const http_status_codes_1 = require("http-status-codes");
const load_assets_1 = __importDefault(require("../../load-assets"));
const string_1 = require("../utils/string");
const safe_api_1 = require("./safe-api");
async function handleRequestPauseEvent(event, client, sessionId) {
    if ((0, cdp_1.isRequest)(event))
        await (0, safe_api_1.safeContinueRequest)(client, event, sessionId);
    else
        await (0, safe_api_1.safeContinueResponse)(client, event, sessionId);
}
const internalRequest = {
    condition: (event) => !event.networkId && event.resourceType !== 'Document' && !event.request.url,
    handler: async (event, client, options, sessionId) => {
        (0, debug_loggers_1.requestPipelineInternalRequestLogger)('%r', event);
        await handleRequestPauseEvent(event, client, sessionId);
    },
};
const serviceRequest = {
    condition: (event, options, serviceRoutes) => {
        const url = event.request.url;
        // NOTE: the service 'Error page' should be proxied.
        if (url === serviceRoutes.errorPage1
            || url === serviceRoutes.errorPage2)
            return false;
        return options.serviceDomains.some(domain => url.startsWith(domain));
    },
    handler: async (event, client, options, sessionId) => {
        (0, debug_loggers_1.requestPipelineServiceRequestLogger)('%r', event);
        await handleRequestPauseEvent(event, client, sessionId);
    },
};
const defaultFaviconRequest = {
    condition: (event) => {
        const parsedUrl = new URL(event.request.url);
        return parsedUrl.pathname === injectables_1.DEFAULT_FAVICON_PATH;
    },
    handler: async (event, client, options, sessionId) => {
        (0, debug_loggers_1.requestPipelineLogger)('%r', event);
        if ((0, cdp_1.isRequest)(event))
            await (0, safe_api_1.safeContinueRequest)(client, event, sessionId);
        else {
            if (event.responseStatusCode === http_status_codes_1.StatusCodes.NOT_FOUND) { // eslint-disable-line no-lonely-if
                const { favIcon } = (0, load_assets_1.default)(options.developmentMode);
                await (0, safe_api_1.safeFulfillRequest)(client, {
                    requestId: event.requestId,
                    responseCode: http_status_codes_1.StatusCodes.OK,
                    responseHeaders: [constants_1.FAVICON_CONTENT_TYPE_HEADER],
                    body: (0, string_1.toBase64String)(favIcon),
                }, sessionId);
            }
            else
                await (0, safe_api_1.safeContinueResponse)(client, event, sessionId);
        }
    },
};
const SPECIAL_REQUEST_HANDLERS = [
    internalRequest,
    serviceRequest,
    defaultFaviconRequest,
];
function getSpecialRequestHandler(event, options, serviceRoutes) {
    const specialRequestHandler = SPECIAL_REQUEST_HANDLERS.find(h => h.condition(event, options, serviceRoutes));
    return specialRequestHandler ? specialRequestHandler.handler : null;
}
exports.default = getSpecialRequestHandler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,