"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initTestFileCompilers = exports.getTestFileCompilers = void 0;
const testcafe_hammerhead_1 = __importDefault(require("testcafe-hammerhead"));
const testcafe_legacy_api_1 = require("testcafe-legacy-api");
const compiler_1 = __importDefault(require("./test-file/formats/es-next/compiler"));
const compiler_2 = __importDefault(require("./test-file/formats/typescript/compiler"));
const compiler_3 = __importDefault(require("./test-file/formats/coffeescript/compiler"));
const compiler_4 = __importDefault(require("./test-file/formats/raw/compiler"));
const compiler_5 = __importDefault(require("./test-file/formats/dev-tools/compiler"));
const customizable_compilers_1 = __importDefault(require("../configuration/customizable-compilers"));
function createTestFileCompilers(compilerOptions = {}, { baseUrl, esm } = {}) {
    return [
        new testcafe_legacy_api_1.Compiler(testcafe_hammerhead_1.default.processScript),
        new compiler_1.default({ baseUrl, esm }),
        new compiler_2.default(compilerOptions[customizable_compilers_1.default.typescript], { baseUrl, esm }),
        new compiler_3.default({ baseUrl, esm }),
        new compiler_4.default({ baseUrl }),
        new compiler_5.default({ baseUrl }),
    ];
}
let testFileCompilers = [];
function getTestFileCompilers() {
    if (!testFileCompilers.length)
        initTestFileCompilers();
    return testFileCompilers;
}
exports.getTestFileCompilers = getTestFileCompilers;
function initTestFileCompilers(compilerOptions, { baseUrl, esm } = {}) {
    testFileCompilers = createTestFileCompilers(compilerOptions, { baseUrl, esm });
}
exports.initTestFileCompilers = initTestFileCompilers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBpbGVyL2NvbXBpbGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4RUFBNkM7QUFDN0MsNkRBQXlFO0FBQ3pFLG9GQUEwRTtBQUMxRSx1RkFBaUY7QUFDakYseUZBQXFGO0FBQ3JGLGdGQUFtRTtBQUNuRSxzRkFBOEU7QUFDOUUscUdBQTRFO0FBRTVFLFNBQVMsdUJBQXVCLENBQUUsZUFBZSxHQUFHLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0lBQ3pFLE9BQU87UUFDSCxJQUFJLDhCQUFzQixDQUFDLDZCQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3BELElBQUksa0JBQXNCLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDNUMsSUFBSSxrQkFBMEIsQ0FBQyxlQUFlLENBQUMsZ0NBQXFCLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDbkcsSUFBSSxrQkFBNEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNsRCxJQUFJLGtCQUFtQixDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDcEMsSUFBSSxrQkFBd0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDO0tBQzVDLENBQUM7QUFDTixDQUFDO0FBRUQsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFFM0IsU0FBZ0Isb0JBQW9CO0lBQ2hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNO1FBQ3pCLHFCQUFxQixFQUFFLENBQUM7SUFFNUIsT0FBTyxpQkFBaUIsQ0FBQztBQUM3QixDQUFDO0FBTEQsb0RBS0M7QUFFRCxTQUFnQixxQkFBcUIsQ0FBRSxlQUFlLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtJQUN6RSxpQkFBaUIsR0FBRyx1QkFBdUIsQ0FBQyxlQUFlLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNuRixDQUFDO0FBRkQsc0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaGFtbWVyaGVhZCBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCB7IENvbXBpbGVyIGFzIExlZ2FjeVRlc3RGaWxlQ29tcGlsZXIgfSBmcm9tICd0ZXN0Y2FmZS1sZWdhY3ktYXBpJztcbmltcG9ydCBFc05leHRUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4vdGVzdC1maWxlL2Zvcm1hdHMvZXMtbmV4dC9jb21waWxlcic7XG5pbXBvcnQgVHlwZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIgZnJvbSAnLi90ZXN0LWZpbGUvZm9ybWF0cy90eXBlc2NyaXB0L2NvbXBpbGVyJztcbmltcG9ydCBDb2ZmZWVTY3JpcHRUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4vdGVzdC1maWxlL2Zvcm1hdHMvY29mZmVlc2NyaXB0L2NvbXBpbGVyJztcbmltcG9ydCBSYXdUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4vdGVzdC1maWxlL2Zvcm1hdHMvcmF3L2NvbXBpbGVyJztcbmltcG9ydCBEZXZUb29sc1Rlc3RGaWxlQ29tcGlsZXIgZnJvbSAnLi90ZXN0LWZpbGUvZm9ybWF0cy9kZXYtdG9vbHMvY29tcGlsZXInO1xuaW1wb3J0IEN1c3RvbWl6YWJsZUNvbXBpbGVycyBmcm9tICcuLi9jb25maWd1cmF0aW9uL2N1c3RvbWl6YWJsZS1jb21waWxlcnMnO1xuXG5mdW5jdGlvbiBjcmVhdGVUZXN0RmlsZUNvbXBpbGVycyAoY29tcGlsZXJPcHRpb25zID0ge30sIHsgYmFzZVVybCwgZXNtIH0gPSB7fSkge1xuICAgIHJldHVybiBbXG4gICAgICAgIG5ldyBMZWdhY3lUZXN0RmlsZUNvbXBpbGVyKGhhbW1lcmhlYWQucHJvY2Vzc1NjcmlwdCksXG4gICAgICAgIG5ldyBFc05leHRUZXN0RmlsZUNvbXBpbGVyKHsgYmFzZVVybCwgZXNtIH0pLFxuICAgICAgICBuZXcgVHlwZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIoY29tcGlsZXJPcHRpb25zW0N1c3RvbWl6YWJsZUNvbXBpbGVycy50eXBlc2NyaXB0XSwgeyBiYXNlVXJsLCBlc20gfSksXG4gICAgICAgIG5ldyBDb2ZmZWVTY3JpcHRUZXN0RmlsZUNvbXBpbGVyKHsgYmFzZVVybCwgZXNtIH0pLFxuICAgICAgICBuZXcgUmF3VGVzdEZpbGVDb21waWxlcih7IGJhc2VVcmwgfSksXG4gICAgICAgIG5ldyBEZXZUb29sc1Rlc3RGaWxlQ29tcGlsZXIoeyBiYXNlVXJsIH0pLFxuICAgIF07XG59XG5cbmxldCB0ZXN0RmlsZUNvbXBpbGVycyA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVzdEZpbGVDb21waWxlcnMgKCkge1xuICAgIGlmICghdGVzdEZpbGVDb21waWxlcnMubGVuZ3RoKVxuICAgICAgICBpbml0VGVzdEZpbGVDb21waWxlcnMoKTtcblxuICAgIHJldHVybiB0ZXN0RmlsZUNvbXBpbGVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRUZXN0RmlsZUNvbXBpbGVycyAoY29tcGlsZXJPcHRpb25zLCB7IGJhc2VVcmwsIGVzbSB9ID0ge30pIHtcbiAgICB0ZXN0RmlsZUNvbXBpbGVycyA9IGNyZWF0ZVRlc3RGaWxlQ29tcGlsZXJzKGNvbXBpbGVyT3B0aW9ucywgeyBiYXNlVXJsLCBlc20gfSk7XG59XG4iXX0=