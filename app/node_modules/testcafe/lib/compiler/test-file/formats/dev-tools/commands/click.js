"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoubleClickCommandTransformer = exports.RightClickCommandTransformer = exports.ClickCommandTransformer = void 0;
const type_1 = __importDefault(require("../../../../../test-run/commands/type"));
const selector_base_1 = require("./selector-base");
class ClickCommandTransformerBase extends selector_base_1.SelectorCommandTransformerBase {
    constructor(step, type, callsite) {
        super(step, type, callsite);
        this.options = {};
        if (step.offsetX)
            this.options.offsetX = Math.floor(step.offsetX);
        if (step.offsetY)
            this.options.offsetY = Math.floor(step.offsetY);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat(['options']);
    }
}
class ClickCommandTransformer extends ClickCommandTransformerBase {
    constructor(step, callsite) {
        super(step, type_1.default.click, callsite);
    }
}
exports.ClickCommandTransformer = ClickCommandTransformer;
class RightClickCommandTransformer extends ClickCommandTransformerBase {
    constructor(step, callsite) {
        super(step, type_1.default.rightClick, callsite);
    }
}
exports.RightClickCommandTransformer = RightClickCommandTransformer;
class DoubleClickCommandTransformer extends ClickCommandTransformerBase {
    constructor(step, callsite) {
        super(step, type_1.default.doubleClick, callsite);
    }
}
exports.DoubleClickCommandTransformer = DoubleClickCommandTransformer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZGV2LXRvb2xzL2NvbW1hbmRzL2NsaWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLGlGQUF5RDtBQUN6RCxtREFBaUU7QUFFakUsTUFBTSwyQkFBNEIsU0FBUSw4Q0FBOEI7SUFHcEUsWUFBYSxJQUEwQixFQUFFLElBQVksRUFBRSxRQUFnQjtRQUNuRSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVsQixJQUFJLElBQUksQ0FBQyxPQUFPO1lBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEQsSUFBSSxJQUFJLENBQUMsT0FBTztZQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCx3QkFBd0I7UUFDcEIsT0FBTyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Q0FDSjtBQUVELE1BQWEsdUJBQXdCLFNBQVEsMkJBQTJCO0lBQ3BFLFlBQWEsSUFBMEIsRUFBRSxRQUFnQjtRQUNyRCxLQUFLLENBQUMsSUFBSSxFQUFFLGNBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNKO0FBSkQsMERBSUM7QUFFRCxNQUFhLDRCQUE2QixTQUFRLDJCQUEyQjtJQUN6RSxZQUFhLElBQTBCLEVBQUUsUUFBZ0I7UUFDckQsS0FBSyxDQUFDLElBQUksRUFBRSxjQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDSjtBQUpELG9FQUlDO0FBRUQsTUFBYSw2QkFBOEIsU0FBUSwyQkFBMkI7SUFDMUUsWUFBYSxJQUEwQixFQUFFLFFBQWdCO1FBQ3JELEtBQUssQ0FBQyxJQUFJLEVBQUUsY0FBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0o7QUFKRCxzRUFJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERldlRvb2xzUmVjb3JkZXJTdGVwIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IFRZUEUgZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvdHlwZSc7XG5pbXBvcnQgeyBTZWxlY3RvckNvbW1hbmRUcmFuc2Zvcm1lckJhc2UgfSBmcm9tICcuL3NlbGVjdG9yLWJhc2UnO1xuXG5jbGFzcyBDbGlja0NvbW1hbmRUcmFuc2Zvcm1lckJhc2UgZXh0ZW5kcyBTZWxlY3RvckNvbW1hbmRUcmFuc2Zvcm1lckJhc2Uge1xuICAgIHByaXZhdGUgb3B0aW9uczogeyBvZmZzZXRYPzogbnVtYmVyOyBvZmZzZXRZPzogbnVtYmVyIH07XG5cbiAgICBjb25zdHJ1Y3RvciAoc3RlcDogRGV2VG9vbHNSZWNvcmRlclN0ZXAsIHR5cGU6IHN0cmluZywgY2FsbHNpdGU6IG51bWJlcikge1xuICAgICAgICBzdXBlcihzdGVwLCB0eXBlLCBjYWxsc2l0ZSk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG5cbiAgICAgICAgaWYgKHN0ZXAub2Zmc2V0WClcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vZmZzZXRYID0gTWF0aC5mbG9vcihzdGVwLm9mZnNldFgpO1xuXG4gICAgICAgIGlmIChzdGVwLm9mZnNldFkpXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMub2Zmc2V0WSA9IE1hdGguZmxvb3Ioc3RlcC5vZmZzZXRZKTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRBc3NpZ25hYmxlUHJvcGVydGllcygpLmNvbmNhdChbJ29wdGlvbnMnXSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xpY2tDb21tYW5kVHJhbnNmb3JtZXIgZXh0ZW5kcyBDbGlja0NvbW1hbmRUcmFuc2Zvcm1lckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCwgY2FsbHNpdGU6IG51bWJlcikge1xuICAgICAgICBzdXBlcihzdGVwLCBUWVBFLmNsaWNrLCBjYWxsc2l0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmlnaHRDbGlja0NvbW1hbmRUcmFuc2Zvcm1lciBleHRlbmRzIENsaWNrQ29tbWFuZFRyYW5zZm9ybWVyQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKHN0ZXA6IERldlRvb2xzUmVjb3JkZXJTdGVwLCBjYWxsc2l0ZTogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHN0ZXAsIFRZUEUucmlnaHRDbGljaywgY2FsbHNpdGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERvdWJsZUNsaWNrQ29tbWFuZFRyYW5zZm9ybWVyIGV4dGVuZHMgQ2xpY2tDb21tYW5kVHJhbnNmb3JtZXJCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoc3RlcDogRGV2VG9vbHNSZWNvcmRlclN0ZXAsIGNhbGxzaXRlOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoc3RlcCwgVFlQRS5kb3VibGVDbGljaywgY2FsbHNpdGUpO1xuICAgIH1cbn1cbiJdfQ==