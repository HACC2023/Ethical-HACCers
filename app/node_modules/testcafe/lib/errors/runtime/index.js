"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadReporterError = exports.ReadConfigFileError = exports.ImportESMInCommonJSError = exports.SkipJsErrorsArgumentApiError = exports.RequestRuntimeError = exports.BrowserConnectionError = exports.TimeoutError = exports.ReporterPluginError = exports.CompositeError = exports.ClientFunctionAPIError = exports.APIError = exports.TestCompilationError = exports.GeneralError = void 0;
const templates_1 = __importDefault(require("./templates"));
const create_stack_filter_1 = __importDefault(require("../create-stack-filter"));
const get_callsite_1 = require("../get-callsite");
const render_template_1 = __importDefault(require("../../utils/render-template"));
const render_callsite_sync_1 = __importDefault(require("../../utils/render-callsite-sync"));
const types_1 = require("../types");
const get_renderes_1 = __importDefault(require("../../utils/get-renderes"));
const util_1 = __importDefault(require("util"));
const semver_1 = __importDefault(require("semver"));
const utils_1 = require("../test-run/utils");
const module_prefix_1 = __importDefault(require("../../reporter/module-prefix"));
const ERROR_SEPARATOR = '\n\n';
const NO_STACK_AVAILABLE_MSG = 'No stack trace is available for this error';
const MODULE_NOT_FOUND_CODE = 'MODULE_NOT_FOUND';
function formatErrorWithCallsite(error) {
    let formattedMessage = '';
    try {
        const callsite = (0, get_callsite_1.getCallsiteForError)(error);
        const stackFilter = (0, create_stack_filter_1.default)();
        // NOTE: If file from stack doesn't exist an error will be raised here:
        formattedMessage = (callsite === null || callsite === void 0 ? void 0 : callsite.renderSync({ stackFilter })) || NO_STACK_AVAILABLE_MSG;
    }
    catch (_a) {
        formattedMessage = NO_STACK_AVAILABLE_MSG;
    }
    return `${error.message}\n\n${formattedMessage}`;
}
function isModuleNotFoundError(error) {
    return error.code && error.code === MODULE_NOT_FOUND_CODE;
}
// NOTE: The "message" property of the ModuleNotFound error has the following pattern: <message>\nRequire stack:\n<line1>\n<line2>.
// This code removes lines bellow the targetPath. In case of "require('testcafe-reporter-<name>')" it removes all the Require stack.
function formatModuleNotFoundErrorRequireStack(message, targetPath) {
    const messageLines = message.split('\n');
    const targetLineIndex = messageLines.findIndex(line => line.includes(targetPath));
    if (targetLineIndex === -1)
        return message;
    return messageLines.slice(0, targetLineIndex + 1).join('\n');
}
class ProcessTemplateInstruction {
    constructor(processFn) {
        this.processFn = processFn;
    }
}
// Errors
class GeneralError extends Error {
    constructor(...args) {
        const code = args.shift();
        const template = templates_1.default[code];
        super((0, render_template_1.default)(template, ...args));
        Object.assign(this, { code, data: args });
        Error.captureStackTrace(this, GeneralError);
    }
    static isGeneralError(arg) {
        return arg instanceof GeneralError;
    }
}
exports.GeneralError = GeneralError;
class TestCompilationError extends Error {
    constructor(originalError) {
        const template = templates_1.default[types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError];
        const errorMessage = (0, utils_1.removePreventModuleCachingSuffix)(originalError.toString());
        super((0, render_template_1.default)(template, errorMessage));
        Object.assign(this, {
            code: types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError,
            data: [errorMessage],
        });
        // NOTE: The stack includes the error message.
        this.stack = (0, render_template_1.default)(template, (0, utils_1.removePreventModuleCachingSuffix)(originalError.stack));
    }
}
exports.TestCompilationError = TestCompilationError;
class APIError extends Error {
    constructor(callsite, code, ...args) {
        let template = templates_1.default[code];
        template = APIError._prepareTemplateAndArgsIfNecessary(template, args);
        const rawMessage = (0, render_template_1.default)(template, ...args);
        super((0, render_template_1.default)(templates_1.default[types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError], rawMessage));
        Object.assign(this, { code, data: args });
        // NOTE: `rawMessage` is used in error substitution if it occurs in test run.
        this.rawMessage = rawMessage;
        if (typeof callsite === 'object')
            this.callsite = callsite;
        else
            this.callsite = (0, get_callsite_1.getCallsiteForMethod)(callsite);
        // NOTE: Property getters are necessary because the callsite can be replaced with external code.
        // See https://github.com/DevExpress/testcafe/blob/v1.0.0/src/compiler/test-file/formats/raw.js#L22
        // Also we can't use an ES6 getter for the 'stack' property, because it will create a getter on the class prototype
        // that cannot override the instance property created by the Error parent class.
        const renderers = (0, get_renderes_1.default)(this.callsite);
        Object.defineProperties(this, {
            'stack': {
                get: () => this._createStack(renderers.noColor),
            },
            'coloredStack': {
                get: () => this._createStack(renderers.default),
            },
        });
    }
    _createStack(renderer) {
        const renderedCallsite = (0, render_callsite_sync_1.default)(this.callsite, {
            renderer: renderer,
            stackFilter: (0, create_stack_filter_1.default)(Error.stackTraceLimit),
        });
        if (!renderedCallsite)
            return this.message;
        return this.message + ERROR_SEPARATOR + renderedCallsite;
    }
    static _prepareTemplateAndArgsIfNecessary(template, args) {
        const lastArg = args.pop();
        if (lastArg instanceof ProcessTemplateInstruction)
            template = lastArg.processFn(template);
        else
            args.push(lastArg);
        return template;
    }
}
exports.APIError = APIError;
class ClientFunctionAPIError extends APIError {
    constructor(methodName, instantiationCallsiteName, code, ...args) {
        args.push(new ProcessTemplateInstruction(template => template.replace(/\{#instantiationCallsiteName\}/g, instantiationCallsiteName)));
        super(methodName, code, ...args);
    }
}
exports.ClientFunctionAPIError = ClientFunctionAPIError;
class CompositeError extends Error {
    constructor(errors) {
        super(errors.map(({ message }) => message).join(ERROR_SEPARATOR));
        this.stack = errors.map(({ stack }) => stack).join(ERROR_SEPARATOR);
        this.code = types_1.RUNTIME_ERRORS.compositeArgumentsError;
    }
}
exports.CompositeError = CompositeError;
class ReporterPluginError extends GeneralError {
    constructor({ name, method, originalError }) {
        const code = types_1.RUNTIME_ERRORS.uncaughtErrorInReporter;
        const preparedStack = ReporterPluginError._prepareStack(originalError);
        super(code, method, name, preparedStack);
    }
    static _prepareStack(err) {
        if (!(err === null || err === void 0 ? void 0 : err.stack)) {
            const inspectedObject = util_1.default.inspect(err);
            return `No stack trace is available for the raised error.\nError object inspection:\n${inspectedObject}`;
        }
        return err.stack;
    }
}
exports.ReporterPluginError = ReporterPluginError;
class TimeoutError extends GeneralError {
    constructor() {
        super(types_1.RUNTIME_ERRORS.timeLimitedPromiseTimeoutExpired);
    }
}
exports.TimeoutError = TimeoutError;
class BrowserConnectionError extends GeneralError {
    constructor(...args) {
        super(types_1.RUNTIME_ERRORS.browserConnectionError, ...args);
    }
}
exports.BrowserConnectionError = BrowserConnectionError;
class RequestRuntimeError extends APIError {
    constructor(methodName, code, ...args) {
        super(methodName, code, ...args);
    }
}
exports.RequestRuntimeError = RequestRuntimeError;
class SkipJsErrorsArgumentApiError extends APIError {
    constructor(code, ...args) {
        super('skipJsErrors', code, ...args);
    }
}
exports.SkipJsErrorsArgumentApiError = SkipJsErrorsArgumentApiError;
class ImportESMInCommonJSError extends GeneralError {
    constructor(originalError, targetFile) {
        const esModule = ImportESMInCommonJSError._getESModule(originalError);
        super(types_1.RUNTIME_ERRORS.cannotImportESMInCommonsJS, esModule, targetFile);
    }
    static _getESModule(err) {
        const regExp = semver_1.default.gte(process.version, '16.0.0') ? new RegExp(/ES Module (\S*)/) : /ES Module: (\S*)/;
        const [, esModule] = err.toString().match(regExp);
        return esModule;
    }
}
exports.ImportESMInCommonJSError = ImportESMInCommonJSError;
class ReadConfigFileError extends GeneralError {
    constructor(code, originalError, filePath, renderCallsite) {
        super(code, filePath, ReadConfigFileError._getFormattedMessage(originalError, renderCallsite, filePath));
    }
    static _getFormattedMessage(originalError, renderCallsite, filePath) {
        if (!renderCallsite)
            return originalError.message;
        if (isModuleNotFoundError(originalError))
            return formatModuleNotFoundErrorRequireStack(originalError.message, filePath);
        return formatErrorWithCallsite(originalError);
    }
}
exports.ReadConfigFileError = ReadConfigFileError;
class LoadReporterError extends GeneralError {
    constructor(originalError, reporterFullName) {
        const reporterShortName = LoadReporterError._ensureShortName(reporterFullName);
        const formattedOriginalError = LoadReporterError._getFormattedMessage(originalError, reporterFullName);
        super(types_1.RUNTIME_ERRORS.cannotFindReporterForAlias, reporterShortName, formattedOriginalError);
    }
    static _ensureShortName(name) {
        if (name && name.startsWith(module_prefix_1.default))
            return name.replace(module_prefix_1.default, '');
        return name;
    }
    static _getFormattedMessage(originalError, reporterFullName) {
        if (isModuleNotFoundError(originalError))
            return formatModuleNotFoundErrorRequireStack(originalError.message, reporterFullName);
        return formatErrorWithCallsite(originalError);
    }
}
exports.LoadReporterError = LoadReporterError;
//# sourceMappingURL=data:application/json;base64,