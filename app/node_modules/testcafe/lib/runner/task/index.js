"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const moment_1 = __importDefault(require("moment"));
const async_event_emitter_1 = __importDefault(require("../../utils/async-event-emitter"));
const browser_job_1 = __importDefault(require("../browser-job"));
const screenshots_1 = __importDefault(require("../../screenshots"));
const warning_log_1 = __importDefault(require("../../notifications/warning-log"));
const fixture_hook_controller_1 = __importDefault(require("../fixture-hook-controller"));
const videos_1 = __importDefault(require("../../video-recorder/videos"));
const phase_1 = __importDefault(require("./phase"));
class Task extends async_event_emitter_1.default {
    constructor({ tests, browserConnectionGroups, proxy, opts, runnerWarningLog, messageBus, }) {
        super({ captureRejections: true });
        this._timeStamp = (0, moment_1.default)();
        this._phase = phase_1.default.initialized;
        this.browserConnectionGroups = browserConnectionGroups;
        this.tests = tests;
        this.opts = opts;
        this._proxy = proxy;
        this.warningLog = new warning_log_1.default(null, warning_log_1.default.createAddWarningCallback(messageBus));
        this._messageBus = messageBus;
        this.warningLog.copyFrom(runnerWarningLog);
        const { path, pathPattern, fullPage, thumbnails } = this.opts.screenshots;
        this.screenshots = new screenshots_1.default({
            enabled: !this.opts.disableScreenshots,
            path,
            pathPattern,
            fullPage,
            thumbnails,
        });
        this.fixtureHookController = new fixture_hook_controller_1.default(tests, browserConnectionGroups.length);
        this._pendingBrowserJobs = this._createBrowserJobs(proxy, this.opts);
        this.testStructure = this._prepareTestStructure(tests);
        if (this.opts.videoPath) {
            const { videoPath, videoOptions, videoEncodingOptions } = this.opts;
            this.videos = new videos_1.default(this._pendingBrowserJobs, { videoPath, videoOptions, videoEncodingOptions }, this.warningLog, this._timeStamp);
        }
    }
    _assignBrowserJobEventHandlers(job) {
        job.on('test-run-done', async (testRun) => {
            await this._messageBus.emit('test-run-done', testRun);
            if (this.opts.stopOnFirstFail && testRun.errs.length) {
                this.abort();
                await this._messageBus.emit('done');
            }
        });
        job.once('start', async (startTime) => {
            if (this._phase !== phase_1.default.started) {
                this._phase = phase_1.default.started;
                this.startTime = startTime;
                await this._messageBus.emit('start', this);
            }
        });
        job.once('done', async () => {
            await this.emit('browser-job-done', job);
            (0, lodash_1.pull)(this._pendingBrowserJobs, job);
            if (!this._pendingBrowserJobs.length) {
                this._phase = phase_1.default.done;
                await this._messageBus.emit('done');
            }
        });
        job.on('test-action-done', async (args) => {
            if (this._phase === phase_1.default.done)
                return;
            await this._messageBus.emit('test-action-done', args);
        });
    }
    _prepareTestStructure(tests) {
        const groups = (0, lodash_1.groupBy)(tests, 'fixture.id');
        return Object.keys(groups).map(fixtureId => {
            const testsByGroup = groups[fixtureId];
            const fixture = testsByGroup[0].fixture;
            return {
                fixture: {
                    id: fixture.id,
                    name: fixture.name,
                    tests: testsByGroup.map(test => {
                        return {
                            id: test.id,
                            name: test.name,
                            skip: test.skip,
                        };
                    }),
                },
            };
        });
    }
    _createBrowserJobs(proxy, opts) {
        return this.browserConnectionGroups.map(browserConnectionGroup => {
            const job = new browser_job_1.default({
                tests: this.tests,
                browserConnections: browserConnectionGroup,
                screenshots: this.screenshots,
                warningLog: this.warningLog,
                fixtureHookController: this.fixtureHookController,
                messageBus: this._messageBus,
                proxy,
                opts,
            });
            this._assignBrowserJobEventHandlers(job);
            browserConnectionGroup.map(bc => bc.addJob(job));
            return job;
        });
    }
    // API
    abort() {
        this._pendingBrowserJobs.forEach(job => job.abort());
    }
}
exports.default = Task;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,