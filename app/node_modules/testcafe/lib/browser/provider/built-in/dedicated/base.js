"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_browser_tools_1 = require("testcafe-browser-tools");
const get_maximized_headless_window_size_1 = __importDefault(require("../../utils/get-maximized-headless-window-size"));
const crop_1 = require("../../../../screenshots/crop");
const promisified_functions_1 = require("../../../../utils/promisified-functions");
exports.default = {
    openedBrowsers: {},
    isMultiBrowser: false,
    supportMultipleWindows: true,
    getActiveWindowId(browserId) {
        return this.openedBrowsers[browserId].activeWindowId;
    },
    setActiveWindowId(browserId, val) {
        this.openedBrowsers[browserId].activeWindowId = val;
    },
    getPageTitle(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        const isIdlePageShown = !Object.keys(runtimeInfo.windowDescriptors).length;
        return isIdlePageShown ? browserId : runtimeInfo.activeWindowId;
    },
    getWindowDescriptor(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        return runtimeInfo.windowDescriptors[runtimeInfo.activeWindowId];
    },
    setWindowDescriptor(browserId, windowDescriptor) {
        const runtimeInfo = this.openedBrowsers[browserId];
        runtimeInfo.windowDescriptors[runtimeInfo.activeWindowId] = windowDescriptor;
    },
    getConfig() {
        throw new Error('Not implemented');
    },
    _getBrowserProtocolClient( /* runtimeInfo */) {
        throw new Error('Not implemented');
    },
    _getBrowserName() {
        return this.providerName.replace(':', '');
    },
    async isValidBrowserName(browserName) {
        const config = await this.getConfig(browserName);
        const browserInfo = await (0, testcafe_browser_tools_1.getBrowserInfo)(config.path || this._getBrowserName());
        return !!browserInfo;
    },
    async isLocalBrowser() {
        return true;
    },
    isHeadlessBrowser(browserId, browserName) {
        if (browserId)
            return this.openedBrowsers[browserId].config.headless;
        const config = this.getConfig(browserName);
        return !!config.headless;
    },
    _getCropDimensions(viewportWidth, viewportHeight) {
        if (!viewportWidth || !viewportHeight)
            return null;
        return {
            left: 0,
            top: 0,
            right: viewportWidth,
            bottom: viewportHeight,
        };
    },
    async takeScreenshot(browserId, path, viewportWidth, viewportHeight, fullPage) {
        const runtimeInfo = this.openedBrowsers[browserId];
        const browserClient = this._getBrowserProtocolClient(runtimeInfo);
        const binaryImage = await browserClient.getScreenshotData(fullPage);
        const cropDimensions = this._getCropDimensions(viewportWidth, viewportHeight);
        let pngImage = await (0, promisified_functions_1.readPng)(binaryImage);
        if (!fullPage)
            pngImage = await (0, crop_1.cropScreenshot)(pngImage, { path, cropDimensions }) || pngImage;
        await (0, promisified_functions_1.writePng)(path, pngImage);
    },
    async maximizeWindow(browserId) {
        const maximumSize = (0, get_maximized_headless_window_size_1.default)();
        await this.resizeWindow(browserId, maximumSize.width, maximumSize.height, maximumSize.width, maximumSize.height);
    },
    async closeBrowserChildWindow(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        const browserClient = this._getBrowserProtocolClient(runtimeInfo);
        return browserClient.closeBrowserChildWindow();
    },
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,