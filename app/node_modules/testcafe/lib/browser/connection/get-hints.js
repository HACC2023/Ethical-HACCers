"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const humanize_duration_1 = __importDefault(require("humanize-duration"));
const error_hints_1 = __importDefault(require("./error-hints"));
const browser_connection_timeouts_1 = require("../../utils/browser-connection-timeouts");
const render_template_1 = __importDefault(require("../../utils/render-template"));
const templates_1 = __importDefault(require("../../errors/runtime/templates"));
// NOTE: hint about too high concurrency factor will be added to the error after exceeding this value
const CONCURRENCY_FACTOR_UPPERBOUND = 3;
function getUsedTimeoutMsg(browserInitTimeout) {
    if (browserInitTimeout) {
        const browserInitTimeoutStr = (0, humanize_duration_1.default)(browserInitTimeout);
        return `${browserInitTimeoutStr} for all browsers`;
    }
    const localInitTimeoutStr = (0, humanize_duration_1.default)(browser_connection_timeouts_1.LOCAL_BROWSER_INIT_TIMEOUT);
    const remoteInitTimeoutStr = (0, humanize_duration_1.default)(browser_connection_timeouts_1.REMOTE_BROWSER_INIT_TIMEOUT);
    return `${localInitTimeoutStr} for local browsers and ${remoteInitTimeoutStr} for remote browsers`;
}
function getHints(connections, opts) {
    const warningsFromConnections = (0, lodash_1.uniq)((0, lodash_1.flattenDeep)(connections.map(bc => bc.warningLog.messages)));
    const warningsFromBootstrapper = opts.warningLog.messages;
    const hints = [...warningsFromConnections, ...warningsFromBootstrapper];
    if (opts.concurrency > CONCURRENCY_FACTOR_UPPERBOUND)
        hints.push((0, render_template_1.default)(templates_1.default[error_hints_1.default.TooHighConcurrencyFactor], opts.concurrency));
    hints.push((0, render_template_1.default)(templates_1.default[error_hints_1.default.UseBrowserInitOption], getUsedTimeoutMsg(opts.browserInitTimeout)));
    hints.push((0, render_template_1.default)(templates_1.default[error_hints_1.default.RestErrorCauses]));
    return hints;
}
exports.default = getHints;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWhpbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Jyb3dzZXIvY29ubmVjdGlvbi9nZXQtaGludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBMkM7QUFDM0MsMEVBQWlEO0FBR2pELGdFQUF1RDtBQUN2RCx5RkFBa0g7QUFDbEgsa0ZBQXlEO0FBQ3pELCtFQUF1RDtBQUV2RCxxR0FBcUc7QUFDckcsTUFBTSw2QkFBNkIsR0FBRyxDQUFDLENBQUM7QUFFeEMsU0FBUyxpQkFBaUIsQ0FBRSxrQkFBMkI7SUFDbkQsSUFBSSxrQkFBa0IsRUFBRTtRQUNwQixNQUFNLHFCQUFxQixHQUFHLElBQUEsMkJBQWdCLEVBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUVuRSxPQUFPLEdBQUcscUJBQXFCLG1CQUFtQixDQUFDO0tBQ3REO0lBRUQsTUFBTSxtQkFBbUIsR0FBSSxJQUFBLDJCQUFnQixFQUFDLHdEQUEwQixDQUFDLENBQUM7SUFDMUUsTUFBTSxvQkFBb0IsR0FBRyxJQUFBLDJCQUFnQixFQUFDLHlEQUEyQixDQUFDLENBQUM7SUFFM0UsT0FBTyxHQUFHLG1CQUFtQiwyQkFBMkIsb0JBQW9CLHNCQUFzQixDQUFDO0FBQ3ZHLENBQUM7QUFFRCxTQUF3QixRQUFRLENBQUUsV0FBZ0MsRUFBRSxJQUF1QjtJQUN2RixNQUFNLHVCQUF1QixHQUFJLElBQUEsYUFBSSxFQUFDLElBQUEsb0JBQVcsRUFBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEcsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztJQUUxRCxNQUFNLEtBQUssR0FBRyxDQUFFLEdBQUcsdUJBQXVCLEVBQUUsR0FBRyx3QkFBd0IsQ0FBRSxDQUFDO0lBRTFFLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyw2QkFBNkI7UUFDaEQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFBLHlCQUFjLEVBQUMsbUJBQVMsQ0FBQyxxQkFBMEIsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBRWpILEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBQSx5QkFBYyxFQUNyQixtQkFBUyxDQUFDLHFCQUEwQixDQUFDLG9CQUFvQixDQUFDLEVBQzFELGlCQUFpQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUM3QyxDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUEseUJBQWMsRUFBQyxtQkFBUyxDQUFDLHFCQUEwQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRixPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBakJELDJCQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZsYXR0ZW5EZWVwLCB1bmlxIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBodW1hbml6ZUR1cmF0aW9uIGZyb20gJ2h1bWFuaXplLWR1cmF0aW9uJztcbmltcG9ydCB7IEJyb3dzZXJTZXRPcHRpb25zIH0gZnJvbSAnLi4vLi4vcnVubmVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IEJyb3dzZXJDb25uZWN0aW9uIGZyb20gJy4vJztcbmltcG9ydCBCcm93c2VyQ29ubmVjdGlvbkVycm9ySGludCBmcm9tICcuL2Vycm9yLWhpbnRzJztcbmltcG9ydCB7IExPQ0FMX0JST1dTRVJfSU5JVF9USU1FT1VULCBSRU1PVEVfQlJPV1NFUl9JTklUX1RJTUVPVVQgfSBmcm9tICcuLi8uLi91dGlscy9icm93c2VyLWNvbm5lY3Rpb24tdGltZW91dHMnO1xuaW1wb3J0IHJlbmRlclRlbXBsYXRlIGZyb20gJy4uLy4uL3V0aWxzL3JlbmRlci10ZW1wbGF0ZSc7XG5pbXBvcnQgVEVNUExBVEVTIGZyb20gJy4uLy4uL2Vycm9ycy9ydW50aW1lL3RlbXBsYXRlcyc7XG5cbi8vIE5PVEU6IGhpbnQgYWJvdXQgdG9vIGhpZ2ggY29uY3VycmVuY3kgZmFjdG9yIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVycm9yIGFmdGVyIGV4Y2VlZGluZyB0aGlzIHZhbHVlXG5jb25zdCBDT05DVVJSRU5DWV9GQUNUT1JfVVBQRVJCT1VORCA9IDM7XG5cbmZ1bmN0aW9uIGdldFVzZWRUaW1lb3V0TXNnIChicm93c2VySW5pdFRpbWVvdXQ/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChicm93c2VySW5pdFRpbWVvdXQpIHtcbiAgICAgICAgY29uc3QgYnJvd3NlckluaXRUaW1lb3V0U3RyID0gaHVtYW5pemVEdXJhdGlvbihicm93c2VySW5pdFRpbWVvdXQpO1xuXG4gICAgICAgIHJldHVybiBgJHticm93c2VySW5pdFRpbWVvdXRTdHJ9IGZvciBhbGwgYnJvd3NlcnNgO1xuICAgIH1cblxuICAgIGNvbnN0IGxvY2FsSW5pdFRpbWVvdXRTdHIgID0gaHVtYW5pemVEdXJhdGlvbihMT0NBTF9CUk9XU0VSX0lOSVRfVElNRU9VVCk7XG4gICAgY29uc3QgcmVtb3RlSW5pdFRpbWVvdXRTdHIgPSBodW1hbml6ZUR1cmF0aW9uKFJFTU9URV9CUk9XU0VSX0lOSVRfVElNRU9VVCk7XG5cbiAgICByZXR1cm4gYCR7bG9jYWxJbml0VGltZW91dFN0cn0gZm9yIGxvY2FsIGJyb3dzZXJzIGFuZCAke3JlbW90ZUluaXRUaW1lb3V0U3RyfSBmb3IgcmVtb3RlIGJyb3dzZXJzYDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SGludHMgKGNvbm5lY3Rpb25zOiBCcm93c2VyQ29ubmVjdGlvbltdLCBvcHRzOiBCcm93c2VyU2V0T3B0aW9ucyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCB3YXJuaW5nc0Zyb21Db25uZWN0aW9ucyAgPSB1bmlxKGZsYXR0ZW5EZWVwKGNvbm5lY3Rpb25zLm1hcChiYyA9PiBiYy53YXJuaW5nTG9nLm1lc3NhZ2VzKSkpO1xuICAgIGNvbnN0IHdhcm5pbmdzRnJvbUJvb3RzdHJhcHBlciA9IG9wdHMud2FybmluZ0xvZy5tZXNzYWdlcztcblxuICAgIGNvbnN0IGhpbnRzID0gWyAuLi53YXJuaW5nc0Zyb21Db25uZWN0aW9ucywgLi4ud2FybmluZ3NGcm9tQm9vdHN0cmFwcGVyIF07XG5cbiAgICBpZiAob3B0cy5jb25jdXJyZW5jeSA+IENPTkNVUlJFTkNZX0ZBQ1RPUl9VUFBFUkJPVU5EKVxuICAgICAgICBoaW50cy5wdXNoKHJlbmRlclRlbXBsYXRlKFRFTVBMQVRFU1tCcm93c2VyQ29ubmVjdGlvbkVycm9ySGludC5Ub29IaWdoQ29uY3VycmVuY3lGYWN0b3JdLCBvcHRzLmNvbmN1cnJlbmN5KSk7XG5cbiAgICBoaW50cy5wdXNoKHJlbmRlclRlbXBsYXRlKFxuICAgICAgICBURU1QTEFURVNbQnJvd3NlckNvbm5lY3Rpb25FcnJvckhpbnQuVXNlQnJvd3NlckluaXRPcHRpb25dLFxuICAgICAgICBnZXRVc2VkVGltZW91dE1zZyhvcHRzLmJyb3dzZXJJbml0VGltZW91dClcbiAgICApKTtcblxuICAgIGhpbnRzLnB1c2gocmVuZGVyVGVtcGxhdGUoVEVNUExBVEVTW0Jyb3dzZXJDb25uZWN0aW9uRXJyb3JIaW50LlJlc3RFcnJvckNhdXNlc10pKTtcblxuICAgIHJldHVybiBoaW50cztcbn1cbiJdfQ==