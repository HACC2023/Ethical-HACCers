"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const mustache_1 = __importDefault(require("mustache"));
const os_family_1 = __importDefault(require("os-family"));
const exec_1 = require("../utils/exec");
const fs_exists_promised_1 = __importDefault(require("../utils/fs-exists-promised"));
const errors_1 = require("../errors");
const logger_1 = __importDefault(require("../utils/logger"));
const logger = new logger_1.default('testcafe:browser-tools:open');
async function checkBrowserPath(browserInfo) {
    if (!browserInfo.path) {
        //NOTE: Path may be undefined when winOpenCmdTemplate is specified (e.g. MS Edge)
        if (browserInfo.winOpenCmdTemplate)
            return;
        throw new errors_1.BrowserPathNotSetError();
    }
    var fileExists = await (0, fs_exists_promised_1.default)(browserInfo.path);
    if (!fileExists)
        throw new errors_1.UnableToRunBrowsersError({ path: browserInfo.path });
}
function getWinOpenCommand(browserInfo, pageUrl) {
    if (browserInfo.winOpenCmdTemplate) {
        return mustache_1.default.render(browserInfo.winOpenCmdTemplate, {
            pageUrl: pageUrl
        });
    }
    var browserDirPath = path_1.default.dirname(browserInfo.path);
    var browserExecFileName = path_1.default.basename(browserInfo.path);
    return `start /D "${browserDirPath}" .\\${browserExecFileName} ${browserInfo.cmd} ${pageUrl}`;
}
function getMacOpenCommand(browserInfo, pageUrl) {
    return mustache_1.default.render(browserInfo.macOpenCmdTemplate, {
        path: browserInfo.path,
        cmd: browserInfo.cmd,
        pageUrl: pageUrl
    });
}
function getLinuxOpenCommand(browserInfo, pageUrl) {
    return `"${browserInfo.path}" ${browserInfo.cmd} "${pageUrl}" 0<&- >/dev/null 2>&1 &`;
}
var getOpenCommand = null;
if (os_family_1.default.win)
    getOpenCommand = getWinOpenCommand;
else if (os_family_1.default.mac)
    getOpenCommand = getMacOpenCommand;
else if (os_family_1.default.linux)
    getOpenCommand = getLinuxOpenCommand;
/**
 * Opens the web page in a new instance of the browser.
 * @function
 * @async
 * @name open
 * @param {BrowserInfo} browserInfo - Provides information on the browser where the web page should be opened.
 * @param {string} pageUrl - Specifies the web page URL.
 */
async function default_1(browserInfo, pageUrl) {
    await checkBrowserPath(browserInfo);
    if (!getOpenCommand)
        return;
    var command = getOpenCommand(browserInfo, pageUrl);
    try {
        logger.log(command);
        await (0, exec_1.exec)(command);
    }
    catch (err) {
        logger.log(err);
        throw new errors_1.UnableToRunBrowsersError({ path: browserInfo.path });
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvb3Blbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUN4Qix3REFBZ0M7QUFDaEMsMERBQTJCO0FBQzNCLHdDQUFxQztBQUNyQyxxRkFBaUQ7QUFDakQsc0NBQTZFO0FBQzdFLDZEQUFxQztBQUVyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUV6RCxLQUFLLFVBQVUsZ0JBQWdCLENBQUUsV0FBVztJQUN4QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRTtRQUNuQixpRkFBaUY7UUFDakYsSUFBSSxXQUFXLENBQUMsa0JBQWtCO1lBQzlCLE9BQU87UUFFWCxNQUFNLElBQUksK0JBQXNCLEVBQUUsQ0FBQztLQUN0QztJQUVELElBQUksVUFBVSxHQUFHLE1BQU0sSUFBQSw0QkFBTSxFQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsVUFBVTtRQUNYLE1BQU0sSUFBSSxpQ0FBd0IsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBRSxXQUFXLEVBQUUsT0FBTztJQUM1QyxJQUFJLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRTtRQUNoQyxPQUFPLGtCQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRTtZQUNuRCxPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDLENBQUM7S0FDTjtJQUVELElBQUksY0FBYyxHQUFRLGNBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELElBQUksbUJBQW1CLEdBQUcsY0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUQsT0FBTyxhQUFhLGNBQWMsUUFBUSxtQkFBbUIsSUFBSSxXQUFXLENBQUMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2xHLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLFdBQVcsRUFBRSxPQUFPO0lBQzVDLE9BQU8sa0JBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFO1FBQ25ELElBQUksRUFBSyxXQUFXLENBQUMsSUFBSTtRQUN6QixHQUFHLEVBQU0sV0FBVyxDQUFDLEdBQUc7UUFDeEIsT0FBTyxFQUFFLE9BQU87S0FDbkIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUUsV0FBVyxFQUFFLE9BQU87SUFDOUMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEdBQUcsS0FBSyxPQUFPLDBCQUEwQixDQUFDO0FBQzFGLENBQUM7QUFFRCxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFFMUIsSUFBSSxtQkFBRSxDQUFDLEdBQUc7SUFDTixjQUFjLEdBQUcsaUJBQWlCLENBQUM7S0FDbEMsSUFBSSxtQkFBRSxDQUFDLEdBQUc7SUFDWCxjQUFjLEdBQUcsaUJBQWlCLENBQUM7S0FDbEMsSUFBSSxtQkFBRSxDQUFDLEtBQUs7SUFDYixjQUFjLEdBQUcsbUJBQW1CLENBQUM7QUFFekM7Ozs7Ozs7R0FPRztBQUNZLEtBQUssb0JBQVcsV0FBVyxFQUFFLE9BQU87SUFDL0MsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVwQyxJQUFJLENBQUMsY0FBYztRQUNmLE9BQU87SUFFWCxJQUFJLE9BQU8sR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRW5ELElBQUk7UUFDQSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXBCLE1BQU0sSUFBQSxXQUFJLEVBQUMsT0FBTyxDQUFDLENBQUM7S0FDdkI7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFaEIsTUFBTSxJQUFJLGlDQUF3QixDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ2xFO0FBQ0wsQ0FBQztBQWxCRCw0QkFrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBNdXN0YWNoZSBmcm9tICdtdXN0YWNoZSc7XG5pbXBvcnQgT1MgZnJvbSAnb3MtZmFtaWx5JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICcuLi91dGlscy9leGVjJztcbmltcG9ydCBleGlzdHMgZnJvbSAnLi4vdXRpbHMvZnMtZXhpc3RzLXByb21pc2VkJztcbmltcG9ydCB7IEJyb3dzZXJQYXRoTm90U2V0RXJyb3IsIFVuYWJsZVRvUnVuQnJvd3NlcnNFcnJvciB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ3Rlc3RjYWZlOmJyb3dzZXItdG9vbHM6b3BlbicpO1xuXG5hc3luYyBmdW5jdGlvbiBjaGVja0Jyb3dzZXJQYXRoIChicm93c2VySW5mbykge1xuICAgIGlmICghYnJvd3NlckluZm8ucGF0aCkge1xuICAgICAgICAvL05PVEU6IFBhdGggbWF5IGJlIHVuZGVmaW5lZCB3aGVuIHdpbk9wZW5DbWRUZW1wbGF0ZSBpcyBzcGVjaWZpZWQgKGUuZy4gTVMgRWRnZSlcbiAgICAgICAgaWYgKGJyb3dzZXJJbmZvLndpbk9wZW5DbWRUZW1wbGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0aHJvdyBuZXcgQnJvd3NlclBhdGhOb3RTZXRFcnJvcigpO1xuICAgIH1cblxuICAgIHZhciBmaWxlRXhpc3RzID0gYXdhaXQgZXhpc3RzKGJyb3dzZXJJbmZvLnBhdGgpO1xuXG4gICAgaWYgKCFmaWxlRXhpc3RzKVxuICAgICAgICB0aHJvdyBuZXcgVW5hYmxlVG9SdW5Ccm93c2Vyc0Vycm9yKHsgcGF0aDogYnJvd3NlckluZm8ucGF0aCB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luT3BlbkNvbW1hbmQgKGJyb3dzZXJJbmZvLCBwYWdlVXJsKSB7XG4gICAgaWYgKGJyb3dzZXJJbmZvLndpbk9wZW5DbWRUZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gTXVzdGFjaGUucmVuZGVyKGJyb3dzZXJJbmZvLndpbk9wZW5DbWRUZW1wbGF0ZSwge1xuICAgICAgICAgICAgcGFnZVVybDogcGFnZVVybFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYnJvd3NlckRpclBhdGggICAgICA9IHBhdGguZGlybmFtZShicm93c2VySW5mby5wYXRoKTtcbiAgICB2YXIgYnJvd3NlckV4ZWNGaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUoYnJvd3NlckluZm8ucGF0aCk7XG5cbiAgICByZXR1cm4gYHN0YXJ0IC9EIFwiJHticm93c2VyRGlyUGF0aH1cIiAuXFxcXCR7YnJvd3NlckV4ZWNGaWxlTmFtZX0gJHticm93c2VySW5mby5jbWR9ICR7cGFnZVVybH1gO1xufVxuXG5mdW5jdGlvbiBnZXRNYWNPcGVuQ29tbWFuZCAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICByZXR1cm4gTXVzdGFjaGUucmVuZGVyKGJyb3dzZXJJbmZvLm1hY09wZW5DbWRUZW1wbGF0ZSwge1xuICAgICAgICBwYXRoOiAgICBicm93c2VySW5mby5wYXRoLFxuICAgICAgICBjbWQ6ICAgICBicm93c2VySW5mby5jbWQsXG4gICAgICAgIHBhZ2VVcmw6IHBhZ2VVcmxcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TGludXhPcGVuQ29tbWFuZCAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICByZXR1cm4gYFwiJHticm93c2VySW5mby5wYXRofVwiICR7YnJvd3NlckluZm8uY21kfSBcIiR7cGFnZVVybH1cIiAwPCYtID4vZGV2L251bGwgMj4mMSAmYDtcbn1cblxudmFyIGdldE9wZW5Db21tYW5kID0gbnVsbDtcblxuaWYgKE9TLndpbilcbiAgICBnZXRPcGVuQ29tbWFuZCA9IGdldFdpbk9wZW5Db21tYW5kO1xuZWxzZSBpZiAoT1MubWFjKVxuICAgIGdldE9wZW5Db21tYW5kID0gZ2V0TWFjT3BlbkNvbW1hbmQ7XG5lbHNlIGlmIChPUy5saW51eClcbiAgICBnZXRPcGVuQ29tbWFuZCA9IGdldExpbnV4T3BlbkNvbW1hbmQ7XG5cbi8qKlxuICogT3BlbnMgdGhlIHdlYiBwYWdlIGluIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBicm93c2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAYXN5bmNcbiAqIEBuYW1lIG9wZW5cbiAqIEBwYXJhbSB7QnJvd3NlckluZm99IGJyb3dzZXJJbmZvIC0gUHJvdmlkZXMgaW5mb3JtYXRpb24gb24gdGhlIGJyb3dzZXIgd2hlcmUgdGhlIHdlYiBwYWdlIHNob3VsZCBiZSBvcGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFnZVVybCAtIFNwZWNpZmllcyB0aGUgd2ViIHBhZ2UgVVJMLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICBhd2FpdCBjaGVja0Jyb3dzZXJQYXRoKGJyb3dzZXJJbmZvKTtcblxuICAgIGlmICghZ2V0T3BlbkNvbW1hbmQpXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciBjb21tYW5kID0gZ2V0T3BlbkNvbW1hbmQoYnJvd3NlckluZm8sIHBhZ2VVcmwpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgbG9nZ2VyLmxvZyhjb21tYW5kKTtcblxuICAgICAgICBhd2FpdCBleGVjKGNvbW1hbmQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci5sb2coZXJyKTtcblxuICAgICAgICB0aHJvdyBuZXcgVW5hYmxlVG9SdW5Ccm93c2Vyc0Vycm9yKHsgcGF0aDogYnJvd3NlckluZm8ucGF0aCB9KTtcbiAgICB9XG59XG4iXX0=