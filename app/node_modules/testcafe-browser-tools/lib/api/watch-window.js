"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const find_window_1 = __importDefault(require("./find-window"));
const get_window_size_1 = __importDefault(require("./get-window-size"));
const delay_1 = __importDefault(require("../utils/delay"));
const DEFAULT_WATCHING_INTERVAL = 2000;
/**
 * Pause execution of a Promise chain while the specified browser window is opened.
 * @function
 * @name watchWindow
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow
 * @param {number} [watchingInterval=2000] - A time interval in milliseconds between checking the window state
 * @returns Promise<undefined> A Promise which resolves when the browser window is closed.
 **/
async function default_1(windowDescriptor, watchingInterval = DEFAULT_WATCHING_INTERVAL) {
    var windowDescription = typeof windowDescriptor === 'string' ? await (0, find_window_1.default)(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return;
    var windowSize = await (0, get_window_size_1.default)(windowDescription);
    while (windowSize && windowSize.width && windowSize.height) {
        await (0, delay_1.default)(watchingInterval);
        windowSize = await (0, get_window_size_1.default)(windowDescription);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2gtd2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS93YXRjaC13aW5kb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBdUM7QUFDdkMsd0VBQThDO0FBQzlDLDJEQUFtQztBQUduQyxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQztBQUV2Qzs7Ozs7OztJQU9JO0FBQ1csS0FBSyxvQkFBVyxnQkFBZ0IsRUFBRSxnQkFBZ0IsR0FBRyx5QkFBeUI7SUFDekYsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLGdCQUFnQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFBLHFCQUFVLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFFckgsSUFBSSxDQUFDLGlCQUFpQjtRQUNsQixPQUFPO0lBRVgsSUFBSSxVQUFVLEdBQUcsTUFBTSxJQUFBLHlCQUFhLEVBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUV4RCxPQUFPLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7UUFDeEQsTUFBTSxJQUFBLGVBQUssRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlCLFVBQVUsR0FBRyxNQUFNLElBQUEseUJBQWEsRUFBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBQ3ZEO0FBQ0wsQ0FBQztBQVpELDRCQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpbmRXaW5kb3cgZnJvbSAnLi9maW5kLXdpbmRvdyc7XG5pbXBvcnQgZ2V0V2luZG93U2l6ZSBmcm9tICcuL2dldC13aW5kb3ctc2l6ZSc7XG5pbXBvcnQgZGVsYXkgZnJvbSAnLi4vdXRpbHMvZGVsYXknO1xuXG5cbmNvbnN0IERFRkFVTFRfV0FUQ0hJTkdfSU5URVJWQUwgPSAyMDAwO1xuXG4vKipcbiAqIFBhdXNlIGV4ZWN1dGlvbiBvZiBhIFByb21pc2UgY2hhaW4gd2hpbGUgdGhlIHNwZWNpZmllZCBicm93c2VyIHdpbmRvdyBpcyBvcGVuZWQuXG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lIHdhdGNoV2luZG93XG4gKiBAcGFyYW0ge3N0cmluZyB8IG9iamVjdH0gd2luZG93RGVzY3JpcHRvciAtIFRoZSB0aXRsZSBvZiB0aGUgd2ViIHBhZ2Ugb3BlbmVkIGluIHRoZSB3aW5kb3cgb3IgYSBkZXNjcmlwdG9yIHJldHVybmVkIGJ5IGZpbmRXaW5kb3dcbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2F0Y2hpbmdJbnRlcnZhbD0yMDAwXSAtIEEgdGltZSBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiBjaGVja2luZyB0aGUgd2luZG93IHN0YXRlXG4gKiBAcmV0dXJucyBQcm9taXNlPHVuZGVmaW5lZD4gQSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gdGhlIGJyb3dzZXIgd2luZG93IGlzIGNsb3NlZC5cbiAqKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICh3aW5kb3dEZXNjcmlwdG9yLCB3YXRjaGluZ0ludGVydmFsID0gREVGQVVMVF9XQVRDSElOR19JTlRFUlZBTCkge1xuICAgIHZhciB3aW5kb3dEZXNjcmlwdGlvbiA9IHR5cGVvZiB3aW5kb3dEZXNjcmlwdG9yID09PSAnc3RyaW5nJyA/IGF3YWl0IGZpbmRXaW5kb3cod2luZG93RGVzY3JpcHRvcikgOiB3aW5kb3dEZXNjcmlwdG9yO1xuXG4gICAgaWYgKCF3aW5kb3dEZXNjcmlwdGlvbilcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSBhd2FpdCBnZXRXaW5kb3dTaXplKHdpbmRvd0Rlc2NyaXB0aW9uKTtcblxuICAgIHdoaWxlICh3aW5kb3dTaXplICYmIHdpbmRvd1NpemUud2lkdGggJiYgd2luZG93U2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgYXdhaXQgZGVsYXkod2F0Y2hpbmdJbnRlcnZhbCk7XG4gICAgICAgIHdpbmRvd1NpemUgPSBhd2FpdCBnZXRXaW5kb3dTaXplKHdpbmRvd0Rlc2NyaXB0aW9uKTtcbiAgICB9XG59XG4iXX0=