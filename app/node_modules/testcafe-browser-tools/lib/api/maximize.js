"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const find_window_1 = __importDefault(require("./find-window"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
function getBoundsFromString(boundsString) {
    return boundsString.split('\n');
}
async function getWindowBounds(processId, windowId) {
    var boundsString = await (0, exec_1.execFile)(binaries_1.default.getWindowBounds, [processId, windowId]);
    return getBoundsFromString(boundsString);
}
async function getWindowMaxBounds(processId, windowId) {
    var windowBounds = await getWindowBounds(processId, windowId);
    var maxBoundsString = await (0, exec_1.execFile)(binaries_1.default.getWindowMaxBounds, windowBounds);
    return getBoundsFromString(maxBoundsString);
}
async function maximizeWindowMac(windowDescription) {
    var { processId, windowId } = windowDescription;
    var windowBounds = await getWindowMaxBounds(processId, windowId);
    await (0, exec_1.execFile)(binaries_1.default.setWindowBounds, [processId, windowId].concat(windowBounds));
}
/**
 * Maximizes the specified browser window.
 * @function
 * @async
 * @name maximize
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow.
 **/
async function default_1(windowDescriptor) {
    var windowDescription = typeof windowDescriptor === 'string' ? await (0, find_window_1.default)(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return;
    var commandArguments = void 0;
    if (os_family_1.default.win)
        commandArguments = [windowDescription.hwnd];
    else if (os_family_1.default.linux)
        commandArguments = [windowDescription.windowId];
    else if (os_family_1.default.mac) {
        await maximizeWindowMac(windowDescription);
        return;
    }
    else
        return;
    await (0, exec_1.execFile)(binaries_1.default.maximize, commandArguments);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4aW1pemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL21heGltaXplLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQTJCO0FBQzNCLGdFQUF1QztBQUN2Qyx3Q0FBeUM7QUFDekMsMkRBQW1DO0FBRW5DLFNBQVMsbUJBQW1CLENBQUUsWUFBWTtJQUN0QyxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELEtBQUssVUFBVSxlQUFlLENBQUUsU0FBUyxFQUFFLFFBQVE7SUFDL0MsSUFBSSxZQUFZLEdBQUcsTUFBTSxJQUFBLGVBQVEsRUFBQyxrQkFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRW5GLE9BQU8sbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELEtBQUssVUFBVSxrQkFBa0IsQ0FBRSxTQUFTLEVBQUUsUUFBUTtJQUNsRCxJQUFJLFlBQVksR0FBTSxNQUFNLGVBQWUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDakUsSUFBSSxlQUFlLEdBQUcsTUFBTSxJQUFBLGVBQVEsRUFBQyxrQkFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRWhGLE9BQU8sbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELEtBQUssVUFBVSxpQkFBaUIsQ0FBRSxpQkFBaUI7SUFDL0MsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQztJQUNoRCxJQUFJLFlBQVksR0FBYSxNQUFNLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUUzRSxNQUFNLElBQUEsZUFBUSxFQUFDLGtCQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFDRDs7Ozs7O0lBTUk7QUFDVyxLQUFLLG9CQUFXLGdCQUFnQjtJQUMzQyxJQUFJLGlCQUFpQixHQUFHLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUEscUJBQVUsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUVySCxJQUFJLENBQUMsaUJBQWlCO1FBQ2xCLE9BQU87SUFFWCxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDO0lBRTlCLElBQUksbUJBQUUsQ0FBQyxHQUFHO1FBQ04sZ0JBQWdCLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQyxJQUFJLG1CQUFFLENBQUMsS0FBSztRQUNiLGdCQUFnQixHQUFHLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0MsSUFBSSxtQkFBRSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0saUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUUzQyxPQUFPO0tBQ1Y7O1FBRUcsT0FBTztJQUVYLE1BQU0sSUFBQSxlQUFRLEVBQUMsa0JBQVEsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBckJELDRCQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPUyBmcm9tICdvcy1mYW1pbHknO1xuaW1wb3J0IGZpbmRXaW5kb3cgZnJvbSAnLi9maW5kLXdpbmRvdyc7XG5pbXBvcnQgeyBleGVjRmlsZSB9IGZyb20gJy4uL3V0aWxzL2V4ZWMnO1xuaW1wb3J0IEJJTkFSSUVTIGZyb20gJy4uL2JpbmFyaWVzJztcblxuZnVuY3Rpb24gZ2V0Qm91bmRzRnJvbVN0cmluZyAoYm91bmRzU3RyaW5nKSB7XG4gICAgcmV0dXJuIGJvdW5kc1N0cmluZy5zcGxpdCgnXFxuJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFdpbmRvd0JvdW5kcyAocHJvY2Vzc0lkLCB3aW5kb3dJZCkge1xuICAgIHZhciBib3VuZHNTdHJpbmcgPSBhd2FpdCBleGVjRmlsZShCSU5BUklFUy5nZXRXaW5kb3dCb3VuZHMsIFtwcm9jZXNzSWQsIHdpbmRvd0lkXSk7XG5cbiAgICByZXR1cm4gZ2V0Qm91bmRzRnJvbVN0cmluZyhib3VuZHNTdHJpbmcpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRXaW5kb3dNYXhCb3VuZHMgKHByb2Nlc3NJZCwgd2luZG93SWQpIHtcbiAgICB2YXIgd2luZG93Qm91bmRzICAgID0gYXdhaXQgZ2V0V2luZG93Qm91bmRzKHByb2Nlc3NJZCwgd2luZG93SWQpO1xuICAgIHZhciBtYXhCb3VuZHNTdHJpbmcgPSBhd2FpdCBleGVjRmlsZShCSU5BUklFUy5nZXRXaW5kb3dNYXhCb3VuZHMsIHdpbmRvd0JvdW5kcyk7XG5cbiAgICByZXR1cm4gZ2V0Qm91bmRzRnJvbVN0cmluZyhtYXhCb3VuZHNTdHJpbmcpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtYXhpbWl6ZVdpbmRvd01hYyAod2luZG93RGVzY3JpcHRpb24pIHtcbiAgICB2YXIgeyBwcm9jZXNzSWQsIHdpbmRvd0lkIH0gPSB3aW5kb3dEZXNjcmlwdGlvbjtcbiAgICB2YXIgd2luZG93Qm91bmRzICAgICAgICAgICA9IGF3YWl0IGdldFdpbmRvd01heEJvdW5kcyhwcm9jZXNzSWQsIHdpbmRvd0lkKTtcblxuICAgIGF3YWl0IGV4ZWNGaWxlKEJJTkFSSUVTLnNldFdpbmRvd0JvdW5kcywgW3Byb2Nlc3NJZCwgd2luZG93SWRdLmNvbmNhdCh3aW5kb3dCb3VuZHMpKTtcbn1cbi8qKlxuICogTWF4aW1pemVzIHRoZSBzcGVjaWZpZWQgYnJvd3NlciB3aW5kb3cuXG4gKiBAZnVuY3Rpb25cbiAqIEBhc3luY1xuICogQG5hbWUgbWF4aW1pemVcbiAqIEBwYXJhbSB7c3RyaW5nIHwgb2JqZWN0fSB3aW5kb3dEZXNjcmlwdG9yIC0gVGhlIHRpdGxlIG9mIHRoZSB3ZWIgcGFnZSBvcGVuZWQgaW4gdGhlIHdpbmRvdyBvciBhIGRlc2NyaXB0b3IgcmV0dXJuZWQgYnkgZmluZFdpbmRvdy5cbiAqKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICh3aW5kb3dEZXNjcmlwdG9yKSB7XG4gICAgdmFyIHdpbmRvd0Rlc2NyaXB0aW9uID0gdHlwZW9mIHdpbmRvd0Rlc2NyaXB0b3IgPT09ICdzdHJpbmcnID8gYXdhaXQgZmluZFdpbmRvdyh3aW5kb3dEZXNjcmlwdG9yKSA6IHdpbmRvd0Rlc2NyaXB0b3I7XG5cbiAgICBpZiAoIXdpbmRvd0Rlc2NyaXB0aW9uKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgY29tbWFuZEFyZ3VtZW50cyA9IHZvaWQgMDtcblxuICAgIGlmIChPUy53aW4pXG4gICAgICAgIGNvbW1hbmRBcmd1bWVudHMgPSBbd2luZG93RGVzY3JpcHRpb24uaHduZF07XG4gICAgZWxzZSBpZiAoT1MubGludXgpXG4gICAgICAgIGNvbW1hbmRBcmd1bWVudHMgPSBbd2luZG93RGVzY3JpcHRpb24ud2luZG93SWRdO1xuICAgIGVsc2UgaWYgKE9TLm1hYykge1xuICAgICAgICBhd2FpdCBtYXhpbWl6ZVdpbmRvd01hYyh3aW5kb3dEZXNjcmlwdGlvbik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHJldHVybjtcblxuICAgIGF3YWl0IGV4ZWNGaWxlKEJJTkFSSUVTLm1heGltaXplLCBjb21tYW5kQXJndW1lbnRzKTtcbn1cbiJdfQ==