"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const ensure_directory_1 = __importDefault(require("../utils/ensure-directory"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
const DEFAULT_THUMBNAIL_WIDTH = 240;
const DEFAULT_THUMBNAIL_HEIGHT = 130;
function getThumbnailPath(imagePath) {
    var imageName = path_1.default.basename(imagePath);
    var imageDir = path_1.default.dirname(imagePath);
    return path_1.default.join(imageDir, 'thumbnails', imageName);
}
/**
 * Creates a thumbnail image from the specified PNG image file.
 * @function
 * @async
 * @name generateThumbnail
 * @param {string} sourcePath - Specifies the path to the source image in PNG format.
 * @param {string} thumbnailPath - Specifies the path to the resulting thumbnail image.
 *                                 Defaults to '<sourcePathDirectory>/thumbnails/<sourcePathFileName>'
 * @param {number} width - Specifies the width of the thumbnail image, in pixels (default is 240).
 * @param {number} height - Specifies the height of the thumbnail image, in pixels (default is 130).
 */
async function default_1(sourcePath, thumbnailPath = getThumbnailPath(sourcePath), width = DEFAULT_THUMBNAIL_WIDTH, height = DEFAULT_THUMBNAIL_HEIGHT) {
    if (!await (0, ensure_directory_1.default)(thumbnailPath))
        return;
    await (0, exec_1.execFile)(binaries_1.default.generateThumbnail, [sourcePath, thumbnailPath, width, height]);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtdGh1bWJuYWlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9nZW5lcmF0ZS10aHVtYm5haWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsaUZBQXdEO0FBQ3hELHdDQUF5QztBQUN6QywyREFBbUM7QUFHbkMsTUFBTSx1QkFBdUIsR0FBSSxHQUFHLENBQUM7QUFDckMsTUFBTSx3QkFBd0IsR0FBRyxHQUFHLENBQUM7QUFFckMsU0FBUyxnQkFBZ0IsQ0FBRSxTQUFTO0lBQ2hDLElBQUksU0FBUyxHQUFHLGNBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsSUFBSSxRQUFRLEdBQUksY0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV4QyxPQUFPLGNBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNZLEtBQUssb0JBQ2hCLFVBQVUsRUFDVixhQUFhLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQzVDLEtBQUssR0FBRyx1QkFBdUIsRUFDL0IsTUFBTSxHQUFHLHdCQUF3QjtJQUVqQyxJQUFJLENBQUMsTUFBTSxJQUFBLDBCQUFlLEVBQUMsYUFBYSxDQUFDO1FBQ3JDLE9BQU87SUFFWCxNQUFNLElBQUEsZUFBUSxFQUFDLGtCQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFWRCw0QkFVQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGVuc3VyZURpcmVjdG9yeSBmcm9tICcuLi91dGlscy9lbnN1cmUtZGlyZWN0b3J5JztcbmltcG9ydCB7IGV4ZWNGaWxlIH0gZnJvbSAnLi4vdXRpbHMvZXhlYyc7XG5pbXBvcnQgQklOQVJJRVMgZnJvbSAnLi4vYmluYXJpZXMnO1xuXG5cbmNvbnN0IERFRkFVTFRfVEhVTUJOQUlMX1dJRFRIICA9IDI0MDtcbmNvbnN0IERFRkFVTFRfVEhVTUJOQUlMX0hFSUdIVCA9IDEzMDtcblxuZnVuY3Rpb24gZ2V0VGh1bWJuYWlsUGF0aCAoaW1hZ2VQYXRoKSB7XG4gICAgdmFyIGltYWdlTmFtZSA9IHBhdGguYmFzZW5hbWUoaW1hZ2VQYXRoKTtcbiAgICB2YXIgaW1hZ2VEaXIgID0gcGF0aC5kaXJuYW1lKGltYWdlUGF0aCk7XG5cbiAgICByZXR1cm4gcGF0aC5qb2luKGltYWdlRGlyLCAndGh1bWJuYWlscycsIGltYWdlTmFtZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRodW1ibmFpbCBpbWFnZSBmcm9tIHRoZSBzcGVjaWZpZWQgUE5HIGltYWdlIGZpbGUuXG4gKiBAZnVuY3Rpb25cbiAqIEBhc3luY1xuICogQG5hbWUgZ2VuZXJhdGVUaHVtYm5haWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VQYXRoIC0gU3BlY2lmaWVzIHRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgaW1hZ2UgaW4gUE5HIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0aHVtYm5haWxQYXRoIC0gU3BlY2lmaWVzIHRoZSBwYXRoIHRvIHRoZSByZXN1bHRpbmcgdGh1bWJuYWlsIGltYWdlLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byAnPHNvdXJjZVBhdGhEaXJlY3Rvcnk+L3RodW1ibmFpbHMvPHNvdXJjZVBhdGhGaWxlTmFtZT4nXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBTcGVjaWZpZXMgdGhlIHdpZHRoIG9mIHRoZSB0aHVtYm5haWwgaW1hZ2UsIGluIHBpeGVscyAoZGVmYXVsdCBpcyAyNDApLlxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFNwZWNpZmllcyB0aGUgaGVpZ2h0IG9mIHRoZSB0aHVtYm5haWwgaW1hZ2UsIGluIHBpeGVscyAoZGVmYXVsdCBpcyAxMzApLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoXG4gICAgc291cmNlUGF0aCxcbiAgICB0aHVtYm5haWxQYXRoID0gZ2V0VGh1bWJuYWlsUGF0aChzb3VyY2VQYXRoKSxcbiAgICB3aWR0aCA9IERFRkFVTFRfVEhVTUJOQUlMX1dJRFRILFxuICAgIGhlaWdodCA9IERFRkFVTFRfVEhVTUJOQUlMX0hFSUdIVFxuKSB7XG4gICAgaWYgKCFhd2FpdCBlbnN1cmVEaXJlY3RvcnkodGh1bWJuYWlsUGF0aCkpXG4gICAgICAgIHJldHVybjtcblxuICAgIGF3YWl0IGV4ZWNGaWxlKEJJTkFSSUVTLmdlbmVyYXRlVGh1bWJuYWlsLCBbc291cmNlUGF0aCwgdGh1bWJuYWlsUGF0aCwgd2lkdGgsIGhlaWdodF0pO1xufVxuIl19