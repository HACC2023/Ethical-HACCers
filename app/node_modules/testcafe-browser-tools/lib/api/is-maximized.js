"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const os_1 = require("os");
const find_window_1 = __importDefault(require("./find-window"));
const exec_1 = require("../utils/exec");
const binaries_1 = __importDefault(require("../binaries"));
/**
 * Checks if the specified browser window is maximized.
 * @function
 * @async
 * @name isMaximized
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow.
 * @return {boolean} `true` if the browser window is maximized
 **/
async function default_1(windowDescriptor) {
    var windowDescription = typeof windowDescriptor === 'string' ? await (0, find_window_1.default)(windowDescriptor) : windowDescriptor;
    if (!windowDescription)
        return false;
    var commandArguments = void 0;
    // TODO: implement for macOS
    if (os_family_1.default.win)
        commandArguments = [windowDescription.hwnd];
    else
        return false;
    var result = await (0, exec_1.execFile)(binaries_1.default.maximize, commandArguments.concat('status'));
    return result.replace(os_1.EOL, '').toLowerCase() === 'true';
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbWF4aW1pemVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9pcy1tYXhpbWl6ZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBMkI7QUFDM0IsMkJBQXlCO0FBQ3pCLGdFQUF1QztBQUN2Qyx3Q0FBeUM7QUFDekMsMkRBQW1DO0FBR25DOzs7Ozs7O0lBT0k7QUFDVyxLQUFLLG9CQUFXLGdCQUFnQjtJQUMzQyxJQUFJLGlCQUFpQixHQUFHLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUEscUJBQVUsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUVySCxJQUFJLENBQUMsaUJBQWlCO1FBQ2xCLE9BQU8sS0FBSyxDQUFDO0lBRWpCLElBQUksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFFOUIsNEJBQTRCO0lBQzVCLElBQUksbUJBQUUsQ0FBQyxHQUFHO1FBQ04sZ0JBQWdCLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7UUFFNUMsT0FBTyxLQUFLLENBQUM7SUFFakIsSUFBSSxNQUFNLEdBQUcsTUFBTSxJQUFBLGVBQVEsRUFBQyxrQkFBUSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUVsRixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQztBQUM1RCxDQUFDO0FBakJELDRCQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPUyBmcm9tICdvcy1mYW1pbHknO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuaW1wb3J0IGZpbmRXaW5kb3cgZnJvbSAnLi9maW5kLXdpbmRvdyc7XG5pbXBvcnQgeyBleGVjRmlsZSB9IGZyb20gJy4uL3V0aWxzL2V4ZWMnO1xuaW1wb3J0IEJJTkFSSUVTIGZyb20gJy4uL2JpbmFyaWVzJztcblxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIGJyb3dzZXIgd2luZG93IGlzIG1heGltaXplZC5cbiAqIEBmdW5jdGlvblxuICogQGFzeW5jXG4gKiBAbmFtZSBpc01heGltaXplZFxuICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IHdpbmRvd0Rlc2NyaXB0b3IgLSBUaGUgdGl0bGUgb2YgdGhlIHdlYiBwYWdlIG9wZW5lZCBpbiB0aGUgd2luZG93IG9yIGEgZGVzY3JpcHRvciByZXR1cm5lZCBieSBmaW5kV2luZG93LlxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBicm93c2VyIHdpbmRvdyBpcyBtYXhpbWl6ZWRcbiAqKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICh3aW5kb3dEZXNjcmlwdG9yKSB7XG4gICAgdmFyIHdpbmRvd0Rlc2NyaXB0aW9uID0gdHlwZW9mIHdpbmRvd0Rlc2NyaXB0b3IgPT09ICdzdHJpbmcnID8gYXdhaXQgZmluZFdpbmRvdyh3aW5kb3dEZXNjcmlwdG9yKSA6IHdpbmRvd0Rlc2NyaXB0b3I7XG5cbiAgICBpZiAoIXdpbmRvd0Rlc2NyaXB0aW9uKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgY29tbWFuZEFyZ3VtZW50cyA9IHZvaWQgMDtcblxuICAgIC8vIFRPRE86IGltcGxlbWVudCBmb3IgbWFjT1NcbiAgICBpZiAoT1Mud2luKVxuICAgICAgICBjb21tYW5kQXJndW1lbnRzID0gW3dpbmRvd0Rlc2NyaXB0aW9uLmh3bmRdO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIHJlc3VsdCA9IGF3YWl0IGV4ZWNGaWxlKEJJTkFSSUVTLm1heGltaXplLCBjb21tYW5kQXJndW1lbnRzLmNvbmNhdCgnc3RhdHVzJykpO1xuXG4gICAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKEVPTCwgJycpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiJdfQ==