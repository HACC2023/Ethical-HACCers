"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CODES = exports.CLASSES = exports.MESSAGES = exports.UnableToOpenDisplayError = exports.UnableToAccessScreenRecordingAPIError = exports.UnableToAccessAutomationAPIError = exports.NativeBinaryHasFailedError = exports.UnableToRunBrowsersError = exports.BrowserPathNotSetError = void 0;
const CODES = __importStar(require("./codes"));
exports.CODES = CODES;
const TEMPLATES = __importStar(require("../templates"));
function getErrorCode(errorClass) {
    const code = Object
        .keys(CODES)
        .find(currentCode => exports.CLASSES[currentCode] === errorClass); // eslint-disable-line no-use-before-define
    return code || CODES.E000;
}
function getErrorInfo(errorClass) {
    const code = getErrorCode(errorClass);
    return {
        constructor: exports.CLASSES[code],
        message: exports.MESSAGES[code],
        code
    };
}
class BasicError extends Error {
    constructor(data = {}) {
        const { code, constructor, message } = getErrorInfo(new.target);
        super(message(data));
        this.name = constructor.name;
        this.data = data;
        this.code = code;
    }
}
class BrowserPathNotSetError extends BasicError {
}
exports.BrowserPathNotSetError = BrowserPathNotSetError;
class UnableToRunBrowsersError extends BasicError {
    constructor({ path }) {
        super({ path });
    }
}
exports.UnableToRunBrowsersError = UnableToRunBrowsersError;
class NativeBinaryHasFailedError extends BasicError {
    constructor({ binary, exitCode, output }) {
        super({ binary, exitCode, output });
    }
}
exports.NativeBinaryHasFailedError = NativeBinaryHasFailedError;
class PermissionError extends NativeBinaryHasFailedError {
}
class UnableToAccessAutomationAPIError extends PermissionError {
}
exports.UnableToAccessAutomationAPIError = UnableToAccessAutomationAPIError;
class UnableToAccessScreenRecordingAPIError extends PermissionError {
}
exports.UnableToAccessScreenRecordingAPIError = UnableToAccessScreenRecordingAPIError;
class UnableToOpenDisplayError extends NativeBinaryHasFailedError {
}
exports.UnableToOpenDisplayError = UnableToOpenDisplayError;
exports.MESSAGES = {
    [CODES.E000]: TEMPLATES.BASIC_ERROR_MESSAGE,
    [CODES.E001]: TEMPLATES.BROWSER_PATH_NOT_SET,
    [CODES.E002]: TEMPLATES.UNABLE_TO_RUN_BROWSERS,
    [CODES.E003]: TEMPLATES.NATIVE_BINARY_HAS_FAILED,
    [CODES.E004]: TEMPLATES.UNABLE_TO_ACCESS_AUTOMATION_API,
    [CODES.E005]: TEMPLATES.UNABLE_TO_ACCESS_SCREEN_RECORDING_API,
    [CODES.E006]: TEMPLATES.UNABLE_TO_OPEN_DISPLAY
};
exports.CLASSES = {
    [CODES.E000]: BasicError,
    [CODES.E001]: BrowserPathNotSetError,
    [CODES.E002]: UnableToRunBrowsersError,
    [CODES.E003]: NativeBinaryHasFailedError,
    [CODES.E004]: UnableToAccessAutomationAPIError,
    [CODES.E005]: UnableToAccessScreenRecordingAPIError,
    [CODES.E006]: UnableToOpenDisplayError
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQWlDO0FBd0Z4QixzQkFBSztBQXZGZCx3REFBMEM7QUFHMUMsU0FBUyxZQUFZLENBQUUsVUFBVTtJQUM3QixNQUFNLElBQUksR0FBRyxNQUFNO1NBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNYLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLGVBQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLDJDQUEyQztJQUUxRyxPQUFPLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBRSxVQUFVO0lBQzdCLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUV0QyxPQUFPO1FBQ0gsV0FBVyxFQUFFLGVBQU8sQ0FBQyxJQUFJLENBQUM7UUFDMUIsT0FBTyxFQUFNLGdCQUFRLENBQUMsSUFBSSxDQUFDO1FBRTNCLElBQUk7S0FDUCxDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVyxTQUFRLEtBQUs7SUFDMUIsWUFBYSxJQUFJLEdBQUcsRUFBRTtRQUNsQixNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsR0FBSSxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztDQUNKO0FBRUQsTUFBYSxzQkFBdUIsU0FBUSxVQUFVO0NBRXJEO0FBRkQsd0RBRUM7QUFFRCxNQUFhLHdCQUF5QixTQUFRLFVBQVU7SUFDcEQsWUFBYSxFQUFFLElBQUksRUFBRTtRQUNqQixLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Q0FDSjtBQUpELDREQUlDO0FBRUQsTUFBYSwwQkFBMkIsU0FBUSxVQUFVO0lBQ3RELFlBQWEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtRQUNyQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztDQUNKO0FBSkQsZ0VBSUM7QUFFRCxNQUFNLGVBQWdCLFNBQVEsMEJBQTBCO0NBRXZEO0FBRUQsTUFBYSxnQ0FBaUMsU0FBUSxlQUFlO0NBRXBFO0FBRkQsNEVBRUM7QUFFRCxNQUFhLHFDQUFzQyxTQUFRLGVBQWU7Q0FFekU7QUFGRCxzRkFFQztBQUVELE1BQWEsd0JBQXlCLFNBQVEsMEJBQTBCO0NBRXZFO0FBRkQsNERBRUM7QUFFWSxRQUFBLFFBQVEsR0FBRztJQUNwQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsbUJBQW1CO0lBQzNDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxvQkFBb0I7SUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLHNCQUFzQjtJQUM5QyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsd0JBQXdCO0lBQ2hELENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQywrQkFBK0I7SUFDdkQsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLHFDQUFxQztJQUM3RCxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsc0JBQXNCO0NBQ2pELENBQUM7QUFFVyxRQUFBLE9BQU8sR0FBRztJQUNuQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVO0lBQ3hCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLHNCQUFzQjtJQUNwQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSx3QkFBd0I7SUFDdEMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsMEJBQTBCO0lBQ3hDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLGdDQUFnQztJQUM5QyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxxQ0FBcUM7SUFDbkQsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsd0JBQXdCO0NBQ3pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDT0RFUyBmcm9tICcuL2NvZGVzJztcbmltcG9ydCAqIGFzIFRFTVBMQVRFUyBmcm9tICcuLi90ZW1wbGF0ZXMnO1xuXG5cbmZ1bmN0aW9uIGdldEVycm9yQ29kZSAoZXJyb3JDbGFzcykge1xuICAgIGNvbnN0IGNvZGUgPSBPYmplY3RcbiAgICAgICAgLmtleXMoQ09ERVMpXG4gICAgICAgIC5maW5kKGN1cnJlbnRDb2RlID0+IENMQVNTRVNbY3VycmVudENvZGVdID09PSBlcnJvckNsYXNzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuXG4gICAgcmV0dXJuIGNvZGUgfHwgQ09ERVMuRTAwMDtcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JJbmZvIChlcnJvckNsYXNzKSB7XG4gICAgY29uc3QgY29kZSA9IGdldEVycm9yQ29kZShlcnJvckNsYXNzKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBDTEFTU0VTW2NvZGVdLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIG1lc3NhZ2U6ICAgICBNRVNTQUdFU1tjb2RlXSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuXG4gICAgICAgIGNvZGVcbiAgICB9O1xufVxuXG5jbGFzcyBCYXNpY0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yIChkYXRhID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBjb2RlLCBjb25zdHJ1Y3RvciwgbWVzc2FnZSB9ICA9IGdldEVycm9ySW5mbyhuZXcudGFyZ2V0KTtcblxuICAgICAgICBzdXBlcihtZXNzYWdlKGRhdGEpKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJyb3dzZXJQYXRoTm90U2V0RXJyb3IgZXh0ZW5kcyBCYXNpY0Vycm9yIHtcblxufVxuXG5leHBvcnQgY2xhc3MgVW5hYmxlVG9SdW5Ccm93c2Vyc0Vycm9yIGV4dGVuZHMgQmFzaWNFcnJvciB7XG4gICAgY29uc3RydWN0b3IgKHsgcGF0aCB9KSB7XG4gICAgICAgIHN1cGVyKHsgcGF0aCB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVCaW5hcnlIYXNGYWlsZWRFcnJvciBleHRlbmRzIEJhc2ljRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yICh7IGJpbmFyeSwgZXhpdENvZGUsIG91dHB1dCB9KSB7XG4gICAgICAgIHN1cGVyKHsgYmluYXJ5LCBleGl0Q29kZSwgb3V0cHV0IH0pO1xuICAgIH1cbn1cblxuY2xhc3MgUGVybWlzc2lvbkVycm9yIGV4dGVuZHMgTmF0aXZlQmluYXJ5SGFzRmFpbGVkRXJyb3Ige1xuXG59XG5cbmV4cG9ydCBjbGFzcyBVbmFibGVUb0FjY2Vzc0F1dG9tYXRpb25BUElFcnJvciBleHRlbmRzIFBlcm1pc3Npb25FcnJvciB7XG5cbn1cblxuZXhwb3J0IGNsYXNzIFVuYWJsZVRvQWNjZXNzU2NyZWVuUmVjb3JkaW5nQVBJRXJyb3IgZXh0ZW5kcyBQZXJtaXNzaW9uRXJyb3Ige1xuXG59XG5cbmV4cG9ydCBjbGFzcyBVbmFibGVUb09wZW5EaXNwbGF5RXJyb3IgZXh0ZW5kcyBOYXRpdmVCaW5hcnlIYXNGYWlsZWRFcnJvciB7XG5cbn1cblxuZXhwb3J0IGNvbnN0IE1FU1NBR0VTID0ge1xuICAgIFtDT0RFUy5FMDAwXTogVEVNUExBVEVTLkJBU0lDX0VSUk9SX01FU1NBR0UsXG4gICAgW0NPREVTLkUwMDFdOiBURU1QTEFURVMuQlJPV1NFUl9QQVRIX05PVF9TRVQsXG4gICAgW0NPREVTLkUwMDJdOiBURU1QTEFURVMuVU5BQkxFX1RPX1JVTl9CUk9XU0VSUyxcbiAgICBbQ09ERVMuRTAwM106IFRFTVBMQVRFUy5OQVRJVkVfQklOQVJZX0hBU19GQUlMRUQsXG4gICAgW0NPREVTLkUwMDRdOiBURU1QTEFURVMuVU5BQkxFX1RPX0FDQ0VTU19BVVRPTUFUSU9OX0FQSSxcbiAgICBbQ09ERVMuRTAwNV06IFRFTVBMQVRFUy5VTkFCTEVfVE9fQUNDRVNTX1NDUkVFTl9SRUNPUkRJTkdfQVBJLFxuICAgIFtDT0RFUy5FMDA2XTogVEVNUExBVEVTLlVOQUJMRV9UT19PUEVOX0RJU1BMQVlcbn07XG5cbmV4cG9ydCBjb25zdCBDTEFTU0VTID0ge1xuICAgIFtDT0RFUy5FMDAwXTogQmFzaWNFcnJvcixcbiAgICBbQ09ERVMuRTAwMV06IEJyb3dzZXJQYXRoTm90U2V0RXJyb3IsXG4gICAgW0NPREVTLkUwMDJdOiBVbmFibGVUb1J1bkJyb3dzZXJzRXJyb3IsXG4gICAgW0NPREVTLkUwMDNdOiBOYXRpdmVCaW5hcnlIYXNGYWlsZWRFcnJvcixcbiAgICBbQ09ERVMuRTAwNF06IFVuYWJsZVRvQWNjZXNzQXV0b21hdGlvbkFQSUVycm9yLFxuICAgIFtDT0RFUy5FMDA1XTogVW5hYmxlVG9BY2Nlc3NTY3JlZW5SZWNvcmRpbmdBUElFcnJvcixcbiAgICBbQ09ERVMuRTAwNl06IFVuYWJsZVRvT3BlbkRpc3BsYXlFcnJvclxufTtcblxuXG5leHBvcnQgeyBDT0RFUyB9O1xuIl19