"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graceful_fs_1 = __importDefault(require("graceful-fs"));
const path_1 = require("path");
const mkdirp_1 = __importDefault(require("mkdirp"));
const promisify_1 = __importDefault(require("./promisify"));
const delay_1 = __importDefault(require("./delay"));
const stat = (0, promisify_1.default)(graceful_fs_1.default.stat);
const readdir = (0, promisify_1.default)(graceful_fs_1.default.readdir);
const mkdir = (0, promisify_1.default)(mkdirp_1.default);
const MAX_RETRY_COUNT = 10;
const RETRY_DELAY = 100;
async function createDirectory(directoryPath) {
    try {
        await mkdir(directoryPath);
        return true;
    }
    catch (e) {
        return false;
    }
}
async function readDirectory(directoryPath) {
    try {
        await readdir(directoryPath);
        return true;
    }
    catch (e) {
        return false;
    }
}
async function ensureDirectory(directoryPath) {
    var fileEnsured = await createDirectory(directoryPath) && await readDirectory(directoryPath);
    for (var i = 0; i < MAX_RETRY_COUNT && !fileEnsured; i++) {
        await (0, delay_1.default)(RETRY_DELAY);
        fileEnsured = await createDirectory(directoryPath) && await readDirectory(directoryPath);
    }
    return fileEnsured;
}
async function default_1(fileName) {
    var directoryPath = (0, path_1.dirname)(fileName);
    try {
        var stats = await stat(directoryPath);
        return stats.isDirectory();
    }
    catch (e) {
        if (e.code === 'ENOENT')
            return await ensureDirectory(directoryPath);
        return false;
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5zdXJlLWRpcmVjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9lbnN1cmUtZGlyZWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQTZCO0FBQzdCLCtCQUErQjtBQUMvQixvREFBNEI7QUFDNUIsNERBQW9DO0FBQ3BDLG9EQUE0QjtBQUc1QixNQUFNLElBQUksR0FBSSxJQUFBLG1CQUFTLEVBQUMscUJBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxJQUFBLG1CQUFTLEVBQUMscUJBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QyxNQUFNLEtBQUssR0FBRyxJQUFBLG1CQUFTLEVBQUMsZ0JBQU0sQ0FBQyxDQUFDO0FBRWhDLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUMzQixNQUFNLFdBQVcsR0FBTyxHQUFHLENBQUM7QUFFNUIsS0FBSyxVQUFVLGVBQWUsQ0FBRSxhQUFhO0lBQ3pDLElBQUk7UUFDQSxNQUFNLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztLQUNmO0lBQ0QsT0FBTyxDQUFDLEVBQUU7UUFDTixPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUM7QUFFRCxLQUFLLFVBQVUsYUFBYSxDQUFFLGFBQWE7SUFDdkMsSUFBSTtRQUNBLE1BQU0sT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTdCLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLENBQUMsRUFBRTtRQUNOLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxlQUFlLENBQUUsYUFBYTtJQUN6QyxJQUFJLFdBQVcsR0FBSyxNQUFNLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxNQUFNLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUUvRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RELE1BQU0sSUFBQSxlQUFLLEVBQUMsV0FBVyxDQUFDLENBQUM7UUFFekIsV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLGFBQWEsQ0FBQyxJQUFJLE1BQU0sYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQzVGO0lBRUQsT0FBTyxXQUFXLENBQUM7QUFDdkIsQ0FBQztBQUVjLEtBQUssb0JBQVcsUUFBUTtJQUNuQyxJQUFJLGFBQWEsR0FBRyxJQUFBLGNBQU8sRUFBQyxRQUFRLENBQUMsQ0FBQztJQUV0QyxJQUFJO1FBQ0EsSUFBSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFdEMsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDOUI7SUFDRCxPQUFPLENBQUMsRUFBRTtRQUNOLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRO1lBQ25CLE9BQU8sTUFBTSxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFaEQsT0FBTyxLQUFLLENBQUM7S0FDaEI7QUFDTCxDQUFDO0FBZEQsNEJBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZ3JhY2VmdWwtZnMnO1xuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IG1rZGlycCBmcm9tICdta2RpcnAnO1xuaW1wb3J0IHByb21pc2lmeSBmcm9tICcuL3Byb21pc2lmeSc7XG5pbXBvcnQgZGVsYXkgZnJvbSAnLi9kZWxheSc7XG5cblxuY29uc3Qgc3RhdCAgPSBwcm9taXNpZnkoZnMuc3RhdCk7XG5jb25zdCByZWFkZGlyID0gcHJvbWlzaWZ5KGZzLnJlYWRkaXIpO1xuY29uc3QgbWtkaXIgPSBwcm9taXNpZnkobWtkaXJwKTtcblxuY29uc3QgTUFYX1JFVFJZX0NPVU5UID0gMTA7XG5jb25zdCBSRVRSWV9ERUxBWSAgICAgPSAxMDA7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURpcmVjdG9yeSAoZGlyZWN0b3J5UGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG1rZGlyKGRpcmVjdG9yeVBhdGgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVhZERpcmVjdG9yeSAoZGlyZWN0b3J5UGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHJlYWRkaXIoZGlyZWN0b3J5UGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVuc3VyZURpcmVjdG9yeSAoZGlyZWN0b3J5UGF0aCkge1xuICAgIHZhciBmaWxlRW5zdXJlZCAgID0gYXdhaXQgY3JlYXRlRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGgpICYmIGF3YWl0IHJlYWREaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE1BWF9SRVRSWV9DT1VOVCAmJiAhZmlsZUVuc3VyZWQ7IGkrKykge1xuICAgICAgICBhd2FpdCBkZWxheShSRVRSWV9ERUxBWSk7XG5cbiAgICAgICAgZmlsZUVuc3VyZWQgPSBhd2FpdCBjcmVhdGVEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCkgJiYgYXdhaXQgcmVhZERpcmVjdG9yeShkaXJlY3RvcnlQYXRoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZUVuc3VyZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChmaWxlTmFtZSkge1xuICAgIHZhciBkaXJlY3RvcnlQYXRoID0gZGlybmFtZShmaWxlTmFtZSk7XG5cbiAgICB0cnkge1xuICAgICAgICB2YXIgc3RhdHMgPSBhd2FpdCBzdGF0KGRpcmVjdG9yeVBhdGgpO1xuXG4gICAgICAgIHJldHVybiBzdGF0cy5pc0RpcmVjdG9yeSgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJylcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBlbnN1cmVEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==