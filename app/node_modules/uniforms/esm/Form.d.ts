import React, { Component, ComponentType } from 'react';
import { Bridge } from './Bridge';
import { ChangedMap, Context, ModelTransformMode, ValidateMode } from './types';
export declare type FormProps<Model> = {
    autosave: boolean;
    autosaveDelay: number;
    disabled: boolean;
    error: unknown;
    errorsField?: ComponentType;
    id?: string;
    label: boolean;
    model: Model;
    modelTransform?: (mode: ModelTransformMode, model: Model) => Model;
    noValidate: boolean;
    onChange: (key: string, value: unknown) => void;
    onChangeModel: (model: Model) => void;
    onSubmit: (model: Model) => void | Promise<unknown>;
    onValidate: (model: Model, error: unknown) => unknown;
    placeholder: boolean;
    readOnly: boolean;
    schema: Bridge;
    showInlineError: boolean;
    submitField?: ComponentType;
    validate: ValidateMode;
    validator?: unknown;
};
export declare type FormState<Model> = {
    changed: boolean;
    changedMap: ChangedMap<Model>;
    error: unknown;
    model: Model;
    resetCount: number;
    submitted: boolean;
    submitting: boolean;
    validate: boolean;
    validating: boolean;
    validator: (model: Model) => unknown;
};
export declare class Form<Model, Props extends FormProps<Model> = FormProps<Model>, State extends FormState<Model> = FormState<Model>> extends Component<Props, State> {
    static defaultProps: {
        autosave: boolean;
        autosaveDelay: number;
        disabled: boolean;
        error: null;
        label: boolean;
        model: any;
        noValidate: boolean;
        placeholder: boolean;
        onChange(): void;
        onChangeModel(): void;
        onSubmit(): void;
        onValidate(model: unknown, error: unknown): unknown;
        readOnly: boolean;
        showInlineError: boolean;
        validate: string;
    };
    state: State;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props, prevState: State, snapshot: never): void;
    componentWillUnmount(): void;
    delayId: ReturnType<typeof setTimeout> | undefined;
    mounted: boolean;
    randomId: () => string;
    getContext(): Context<Model>;
    getModel(mode?: ModelTransformMode, model?: Model): Model;
    getAutoField: () => ComponentType<{
        name: string;
    }>;
    getErrorsField: () => ComponentType;
    getSubmitField: () => ComponentType;
    getNativeFormProps: () => Omit<Readonly<Props> & Readonly<{
        children?: React.ReactNode;
    }>, "validate" | "onChange" | "onSubmit" | "autosave" | "autosaveDelay" | "disabled" | "error" | "errorsField" | "label" | "model" | "modelTransform" | "onChangeModel" | "onValidate" | "placeholder" | "readOnly" | "schema" | "showInlineError" | "submitField" | "validator">;
    onChange: (key: string, value: unknown) => void;
    onReset: () => void;
    onSubmit: (event?: React.SyntheticEvent<Element, Event> | undefined) => Promise<unknown>;
    onValidate: (key?: string | undefined, value?: unknown) => Promise<unknown>;
    onValidateModel: (originalModel: Model) => Promise<unknown>;
    __reset: (state: State, props: Props) => {
        changed: boolean;
        changedMap: any;
        error: null;
        model: Model;
        resetCount: number;
        submitted: boolean;
        submitting: boolean;
        validate: boolean;
        validating: boolean;
    };
    __then: {
        <T, U>(value: Promise<T>, fn: (value: T) => U): Promise<U>;
        <T_1, U_1>(value: T_1, fn: (value: T_1) => U_1): U_1;
    };
    render(): JSX.Element;
}
