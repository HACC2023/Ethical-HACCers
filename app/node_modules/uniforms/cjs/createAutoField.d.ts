import { ComponentType, ReactElement } from 'react';
import { connectField } from './connectField';
import { Context } from './types';
import { useField } from './useField';
export declare type AutoFieldProps = {
    component?: Component;
    name: string;
    [prop: string]: unknown;
};
/** @internal */
export declare type Component = ComponentType<any> | ReturnType<typeof connectField>;
/** @internal */
export declare type ComponentDetector = (props: ReturnType<typeof useField>[0], uniforms: Context<Record<string, unknown>>) => Component;
export declare function createAutoField(defaultComponentDetector: ComponentDetector): ((rawProps: AutoFieldProps) => ReactElement) & {
    componentDetectorContext: import("react").Context<ComponentDetector>;
    defaultComponentDetector: ComponentDetector;
};
