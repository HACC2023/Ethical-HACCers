import { SyntheticEvent } from 'react';
import { BaseForm, BaseFormProps, BaseFormState } from './BaseForm';
import { Context, DeepPartial, ValidateMode } from './types';
export declare type ValidatedFormProps<Model> = BaseFormProps<Model> & {
    onValidate: (model: DeepPartial<Model>, error: any) => any;
    validate: ValidateMode;
    validator?: any;
};
export declare type ValidatedFormState<Model> = BaseFormState<Model> & {
    error: any;
    validate: boolean;
    validating: boolean;
    validator: (model: DeepPartial<Model>) => any;
};
export declare function Validated<Base extends typeof BaseForm>(Base: Base): {
    new <Model, Props extends ValidatedFormProps<Model> = ValidatedFormProps<Model>, State extends ValidatedFormState<Model> = ValidatedFormState<Model>>(props: Props): {
        validate: (key?: string | undefined, value?: any) => Promise<any>;
        validateModel: (originalModel: any) => Promise<any>;
        getContextError(): any;
        getContext(): Context<Model>;
        getNativeFormProps(): {
            [key: string]: unknown;
            onSubmit: (event?: SyntheticEvent<Element, Event> | undefined) => Promise<any>;
            key: string;
        };
        componentDidUpdate(prevProps: Props, prevState: State, snapshot: never): void;
        onChange(key: string, value: any): void;
        __reset(state: State): Partial<State>;
        onSubmit(event?: SyntheticEvent<Element, Event> | undefined): Promise<any>;
        onValidate(key?: string | undefined, value?: any): Promise<any>;
        onValidateModel(originalModel: Props["model"]): Promise<any>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        delayId?: any;
        mounted: boolean;
        reset: () => void;
        change: (key: string, value: any) => void;
        submit: (event?: SyntheticEvent<Element, Event> | undefined) => Promise<any>;
        randomId: () => string;
        getContextName(): string[];
        getContextModel(): DeepPartial<Model>;
        getContextState(): {
            disabled: boolean;
            label: boolean;
            placeholder: boolean;
            readOnly: boolean;
            showInlineError: boolean;
        };
        getContextSchema(): import("./Bridge").Bridge;
        getContextOnChange(): (key: string, value: any) => void;
        getContextOnSubmit(): (event?: SyntheticEvent<Element, Event> | undefined) => any;
        getModel(mode?: import("./types").ModelTransformMode | undefined, model?: DeepPartial<Model>): DeepPartial<Model>;
        onReset(): void;
        render(): JSX.Element;
        context: any;
        setState<K extends keyof State>(state: State | ((prevState: Readonly<State>, props: Readonly<Props>) => State | Pick<State, K> | null) | Pick<State, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<State>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Props>, nextState: Readonly<State>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props>, prevState: Readonly<State>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<State>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<State>, nextContext: any): void;
    };
    Validated: typeof Validated;
    displayName: string;
    defaultProps: {
        onValidate(model: unknown, error: any): any;
        validate: string;
        autosave: boolean;
        autosaveDelay: number;
        error: null;
        label: boolean;
        model: any;
        noValidate: boolean;
        onSubmit(): void;
    };
    contextType?: import("react").Context<any> | undefined;
} & Base;
export declare const ValidatedForm: {
    new <Model, Props extends ValidatedFormProps<Model> = ValidatedFormProps<Model>, State extends ValidatedFormState<Model> = ValidatedFormState<Model>>(props: Props): {
        validate: (key?: string | undefined, value?: any) => Promise<any>;
        validateModel: (originalModel: any) => Promise<any>;
        getContextError(): any;
        getContext(): Context<Model>;
        getNativeFormProps(): {
            [key: string]: unknown;
            onSubmit: (event?: SyntheticEvent<Element, Event> | undefined) => Promise<any>;
            key: string;
        };
        componentDidUpdate(prevProps: Props, prevState: State, snapshot: never): void;
        onChange(key: string, value: any): void;
        __reset(state: State): Partial<State>;
        onSubmit(event?: SyntheticEvent<Element, Event> | undefined): Promise<any>;
        onValidate(key?: string | undefined, value?: any): Promise<any>;
        onValidateModel(originalModel: Props["model"]): Promise<any>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        delayId?: any;
        mounted: boolean;
        reset: () => void;
        change: (key: string, value: any) => void;
        submit: (event?: SyntheticEvent<Element, Event> | undefined) => Promise<any>;
        randomId: () => string;
        getContextName(): string[];
        getContextModel(): DeepPartial<Model>;
        getContextState(): {
            disabled: boolean;
            label: boolean;
            placeholder: boolean;
            readOnly: boolean;
            showInlineError: boolean;
        };
        getContextSchema(): import("./Bridge").Bridge;
        getContextOnChange(): (key: string, value: any) => void;
        getContextOnSubmit(): (event?: SyntheticEvent<Element, Event> | undefined) => any;
        getModel(mode?: import("./types").ModelTransformMode | undefined, model?: DeepPartial<Model>): DeepPartial<Model>;
        onReset(): void;
        render(): JSX.Element;
        context: any;
        setState<K extends keyof State>(state: State | ((prevState: Readonly<State>, props: Readonly<Props>) => State | Pick<State, K> | null) | Pick<State, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<State>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Props>, nextState: Readonly<State>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props>, prevState: Readonly<State>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<State>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<State>, nextContext: any): void;
    };
    Validated: typeof Validated;
    displayName: string;
    defaultProps: {
        onValidate(model: unknown, error: any): any;
        validate: string;
        autosave: boolean;
        autosaveDelay: number;
        error: null;
        label: boolean;
        model: any;
        noValidate: boolean;
        onSubmit(): void;
    };
    contextType?: import("react").Context<any> | undefined;
} & typeof BaseForm;
export declare type ValidatedForm = typeof ValidatedForm;
