"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const node_builder_1 = require("../node-builder");
const esotope_hammerhead_1 = require("esotope-hammerhead");
const instrumented_1 = require("../instrumented");
// Transform:
// obj.method(args...); obj[method](args...); -->
// _call$(obj, 'method', args...); _call$(obj, method, args...);
const transformer = {
    name: 'method-call',
    nodeReplacementRequireTransform: true,
    nodeTypes: esotope_hammerhead_1.Syntax.CallExpression,
    condition: node => {
        const callee = node.callee;
        if (callee.type === esotope_hammerhead_1.Syntax.MemberExpression) {
            // Skip: super.meth()
            if (callee.object.type === esotope_hammerhead_1.Syntax.Super)
                return false;
            if (callee.computed)
                return callee.property.type === esotope_hammerhead_1.Syntax.Literal ? (0, instrumented_1.shouldInstrumentMethod)(callee.property.value) : true;
            return callee.property.type === esotope_hammerhead_1.Syntax.Identifier && (0, instrumented_1.shouldInstrumentMethod)(callee.property.name);
        }
        return false;
    },
    run: node => {
        const callee = node.callee;
        const method = callee.computed
            ? callee.property
            : (0, node_builder_1.createSimpleLiteral)(callee.property.name); // eslint-disable-line no-extra-parens
        const optional = node.optional;
        return (0, node_builder_1.createMethodCallWrapper)(callee.object, method, node.arguments, optional);
    },
};
exports.default = transformer;module.exports = exports.default;

