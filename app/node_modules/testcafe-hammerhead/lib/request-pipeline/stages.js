"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../utils/logger"));
const http_1 = require("../utils/http");
const utils_1 = require("./utils");
const websocket_1 = require("./websocket");
const lodash_1 = require("lodash");
const resources_1 = require("../processing/resources");
const connection_reset_guard_1 = require("./connection-reset-guard");
const configure_response_event_options_1 = __importDefault(require("./request-hooks/events/configure-response-event-options"));
const EVENT_SOURCE_REQUEST_TIMEOUT = 60 * 60 * 1000;
exports.default = [
    function handleSocketError(ctx) {
        // NOTE: In some case on macOS, browser reset connection with server and we need to catch this exception.
        if (!ctx.isWebSocket)
            return;
        ctx.res.on('error', e => {
            logger_1.default.proxy.onWebSocketResponseError(ctx, e);
            // @ts-ignore
            if (e.code === 'ECONNRESET' && !ctx.mock) {
                if (ctx.destRes)
                    ctx.destRes.destroy();
                else
                    ctx.isWebSocketConnectionReset = true;
            }
            else
                throw e;
        });
    },
    async function fetchProxyRequestBody(ctx) {
        if (ctx.isHTMLPage)
            ctx.session.onPageRequest(ctx);
        ctx.reqBody = await (0, http_1.fetchBody)(ctx.req);
    },
    async function sendDestinationRequest(ctx) {
        ctx.setRequestOptions(ctx.eventFactory);
        if (ctx.isSpecialPage) {
            ctx.respondForSpecialPage();
            return;
        }
        await ctx.onRequestHookRequest(ctx.session.requestHookEventProvider, ctx.eventFactory);
        if (ctx.mock)
            await ctx.mockResponse(ctx.session.requestHookEventProvider);
        else
            await (0, utils_1.sendRequest)(ctx);
    },
    async function checkSameOriginPolicyCompliance(ctx) {
        if (ctx.isPassSameOriginPolicy())
            return;
        ctx.isSameOriginPolicyFailed = true;
        await ctx.onRequestHookConfigureResponse(ctx.session.requestHookEventProvider, ctx.eventFactory);
        await Promise.all(ctx.onResponseEventData.map(async (eventData) => {
            await ctx.onRequestHookResponse(ctx.session.requestHookEventProvider, ctx.eventFactory, eventData.rule, configure_response_event_options_1.default.DEFAULT);
        }));
        logger_1.default.proxy.onCORSFailed(ctx);
    },
    async function decideOnProcessingStrategy(ctx) {
        ctx.goToNextStage = false;
        if (ctx.isWebSocket)
            (0, websocket_1.respondOnWebSocket)(ctx);
        else if (ctx.contentInfo.requireProcessing) {
            if (ctx.destRes.statusCode === 204)
                ctx.destRes.statusCode = 200;
            ctx.goToNextStage = true;
        }
        else if (ctx.isSpecialPage) {
            ctx.sendResponseHeaders();
            ctx.res.end();
        }
        // NOTE: Just pipe the content body to the browser if we don't need to process it.
        else {
            await ctx.onRequestHookConfigureResponse(ctx.session.requestHookEventProvider, ctx.eventFactory);
            ctx.sendResponseHeaders();
            if (ctx.contentInfo.isNotModified)
                return await ctx.callOnResponseEventCallbackForMotModifiedResource(ctx);
            const onResponseEventDataWithBody = ctx.getOnResponseEventData({ includeBody: true });
            const onResponseEventDataWithoutBody = ctx.getOnResponseEventData({ includeBody: false });
            if (onResponseEventDataWithBody.length)
                await ctx.callOnResponseEventCallbackWithBodyForNonProcessedRequest(ctx, onResponseEventDataWithBody);
            else if (onResponseEventDataWithoutBody.length)
                await ctx.callOnResponseEventCallbackWithoutBodyForNonProcessedResource(ctx, onResponseEventDataWithoutBody);
            else if (ctx.req.socket.destroyed && !ctx.isDestResReadableEnded)
                ctx.destRes.destroy();
            else {
                ctx.res.once('close', () => !ctx.isDestResReadableEnded && ctx.destRes.destroy());
                await ctx.pipeNonProcessedResponse();
            }
            // NOTE: sets 60 minutes timeout for the "event source" requests instead of 2 minutes by default
            if (ctx.dest.isEventSource) {
                ctx.req.setTimeout(EVENT_SOURCE_REQUEST_TIMEOUT, lodash_1.noop);
                ctx.req.on('close', () => ctx.destRes.destroy());
            }
        }
    },
    async function fetchContent(ctx) {
        await ctx.fetchDestResBody();
        if (ctx.requestFilterRules.length)
            ctx.saveNonProcessedDestResBody(ctx.destResBody);
    },
    async function processContent(ctx) {
        try {
            ctx.destResBody = await (0, resources_1.process)(ctx);
        }
        catch (err) {
            (0, utils_1.error)(ctx, err);
        }
    },
    async function sendProxyResponse(ctx) {
        await ctx.onRequestHookConfigureResponse(ctx.session.requestHookEventProvider, ctx.eventFactory);
        ctx.sendResponseHeaders();
        (0, connection_reset_guard_1.connectionResetGuard)(async () => {
            await Promise.all(ctx.onResponseEventData.map(async (eventData) => {
                await ctx.onRequestHookResponse(ctx.session.requestHookEventProvider, ctx.eventFactory, eventData.rule, eventData.opts);
            }));
            logger_1.default.proxy.onSendResponseBody(ctx);
            ctx.res.write(ctx.destResBody);
            ctx.res.end();
        });
    },
];module.exports = exports.default;

