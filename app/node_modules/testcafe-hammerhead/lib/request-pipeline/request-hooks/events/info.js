"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreparedResponseInfo = exports.ResponseInfo = exports.RequestInfo = void 0;
const builtin_header_names_1 = __importDefault(require("../../builtin-header-names"));
class RequestInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    static getUserAgent(headers) {
        const userAgentKey = Object
            .keys(headers)
            .find(key => key.toLowerCase() === builtin_header_names_1.default.userAgent);
        return userAgentKey
            ? headers[userAgentKey]
            : '';
    }
    static from(ctx) {
        const requestId = ctx.requestId;
        const userAgent = RequestInfo.getUserAgent(ctx.reqOpts.headers);
        const url = ctx.isWebSocket ? ctx.reqOpts.url.replace(/^http/, 'ws') : ctx.reqOpts.url;
        const method = ctx.reqOpts.method.toLowerCase();
        const isAjax = ctx.isAjax;
        const headers = ctx.reqOpts.headers;
        const body = ctx.reqOpts.body;
        const sessionId = ctx.session.id;
        return new RequestInfo({
            requestId,
            userAgent,
            url,
            method,
            isAjax,
            headers,
            body,
            sessionId,
        });
    }
}
exports.RequestInfo = RequestInfo;
class ResponseInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    static from(ctx) {
        const requestId = ctx.requestId;
        const headers = ctx.destRes.headers;
        const body = ctx.nonProcessedDestResBody;
        const sessionId = ctx.session.id;
        const statusCode = ctx.destRes.statusCode || 200;
        const isSameOriginPolicyFailed = ctx.isSameOriginPolicyFailed;
        return new ResponseInfo({
            requestId,
            statusCode,
            sessionId,
            headers,
            body,
            isSameOriginPolicyFailed,
        });
    }
}
exports.ResponseInfo = ResponseInfo;
class PreparedResponseInfo {
    constructor(responseInfo, opts) {
        Object.assign(this, responseInfo);
        if (!opts.includeHeaders)
            delete this.headers;
        if (!opts.includeBody)
            delete this.body;
    }
}
exports.PreparedResponseInfo = PreparedResponseInfo;
